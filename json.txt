{"name":"log_function.php","content":"<?php\r\nrequire_once 'db_conn.php';\r\n\r\nfunction registra_modificacoes(array $modificacoes, $token, $id, $table){\r\n    if (count($modificacoes) == 0){\r\n        return false;\r\n    }\r\n    foreach ($modificacoes as $modificacao) {\r\n        registrar_log($token, $id, $table, $modificacao);\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction registrar_log($token, $id, $table, $action){\r\n    global $pdo;\r\n\r\n    $sql = \"SELECT username from access_tokens where access_token = :access_token\";\r\n    $stmt = $pdo->prepare($sql);\r\n\r\n    // Vincular os parâmetros\r\n    $stmt->bindParam(':access_token', $token);\r\n\r\n    // Executar a instrução\r\n    $stmt->execute();\r\n\r\n    $query_token = $stmt->fetch(PDO::FETCH_OBJ);\r\n    //error_log(\"teste1: \");\r\n    // Se o token não for encontrado, retorna falso\r\n    if (!$query_token) {\r\n        return false;\r\n    }\r\n    $username = $query_token->username;\r\n    //error_log(\"username: \". $username);\r\n\r\n    $sql = \"INSERT INTO log_reference (reference_id, table_name) \r\n            VALUES (:reference_id, :table_name) RETURNING id\";\r\n            \r\n\r\n    $stmt = $pdo->prepare($sql);\r\n\r\n    // Vincular os parâmetros\r\n    $stmt->bindParam(':reference_id', $id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':table_name', $table, PDO::PARAM_STR);\r\n\r\n    // Executar a instrução\r\n    $stmt->execute();\r\n\r\n    // Obter o ID inserido\r\n    $insert_id = $stmt->fetchColumn();\r\n    //error_log(\"insert_id: \". $insert_id);\r\n\r\n    $sql = \"INSERT INTO system_logs (username, log_reference_id, action) \r\n            VALUES (:username, :log_reference_id, :action)\";\r\n            \r\n\r\n    $stmt = $pdo->prepare($sql);\r\n    //error_log(\"insert_id: \". $action);\r\n    // Vincular os parâmetros\r\n    $stmt->bindParam(':username', $username, PDO::PARAM_STR);\r\n    $stmt->bindParam(':log_reference_id', $insert_id, PDO::PARAM_INT);\r\n    $stmt->bindParam(':action', $action, PDO::PARAM_STR);\r\n\r\n    // Executar a instrução\r\n    $stmt->execute();\r\n    //error_log(\"sucesso:\");\r\n    return true;\r\n}\r\n?>"}
{"name":"MedicoController.java","content":"package med.voll.api.controller;\n\nimport io.swagger.v3.oas.annotations.security.SecurityRequirement;\nimport jakarta.validation.Valid;\nimport med.voll.api.domain.medico.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.web.PageableDefault;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.util.UriComponentsBuilder;\n\n@RestController\n@RequestMapping(\"medicos\")\n@SecurityRequirement(name = \"bearer-key\")\npublic class MedicoController {\n\n    @Autowired\n    private MedicoRepository repository;\n    \n    @PostMapping\n    @Transactional\n    public ResponseEntity cadastrar(@RequestBody @Valid DadosCadastroMedico dados, UriComponentsBuilder uriBuilder) {\n        var medico = new Medico(dados);\n        repository.save(new Medico(dados));\n\n        var uri = uriBuilder.path(\"/medicos/{id}\").buildAndExpand(medico.getId()).toUri();\n\n        return ResponseEntity.created(uri).body(new DadosDetalhamentoMedico(medico));\n    }\n\n    @GetMapping\n    public ResponseEntity<Page<DadosListagemMedico>> listar(@PageableDefault(size = 10, sort = {\"nome\"}) Pageable paginacao) {\n        var page = repository.findAllByAtivoTrue(paginacao).map(DadosListagemMedico::new);\n        return ResponseEntity.ok(page);\n    }\n\n    @PutMapping\n    @Transactional\n    public ResponseEntity atualizar(@RequestBody @Valid DadosAtualizacaoMedico dados) {\n        var medico = repository.getReferenceById(dados.id());\n        medico.atualizarInformacoes(dados);\n        \n        return ResponseEntity.ok(new DadosDetalhamentoMedico(medico));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @Transactional\n    public ResponseEntity deletar(@PathVariable Long id) {\n        var medico = repository.getReferenceById(id);\n        medico.excluir();\n\n        return ResponseEntity.noContent().build();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity detalhar(@PathVariable Long id) {\n        var medico = repository.getReferenceById(id);\n\n        return ResponseEntity.ok(new DadosDetalhamentoMedico(medico));\n    }\n}\n"}