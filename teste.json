[
  {
    "name": "client\\package.json",
    "content": "{\n  \"name\": \"client\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"react-redux\": \"^7.2.6\",\n    \"react-router-dom\": \"^6.0.2\",\n    \"react-scripts\": \"4.0.3\",\n    \"redux\": \"^4.1.2\",\n    \"redux-devtools-extension\": \"^2.13.9\",\n    \"redux-thunk\": \"^2.4.0\",\n    \"uuid\": \"^8.3.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"proxy\": \"http://localhost:5000\"\n}\n"
  },
  {
    "name": "client\\public\\index.html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\n      crossorigin=\"anonymous\"\n    />\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <title>Welcome To DevConnector</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  {
    "name": "client\\public\\manifest.json",
    "content": "{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n"
  },
  {
    "name": "client\\src\\actions\\alert.js",
    "content": "import { v4 as uuidv4 } from 'uuid';\nimport { SET_ALERT, REMOVE_ALERT } from './types';\n\nexport const setAlert = (msg, alertType, timeout = 5000) => dispatch => {\n  const id = uuidv4();\n  dispatch({\n    type: SET_ALERT,\n    payload: { msg, alertType, id }\n  });\n\n  setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), timeout);\n};\n"
  },
  {
    "name": "client\\src\\actions\\auth.js",
    "content": "import api from '../utils/api';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT\n} from './types';\n\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  try {\n    const res = await api.get('/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = (formData) => async (dispatch) => {\n  try {\n    const res = await api.post('/users', formData);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n  const body = { email, password };\n\n  try {\n    const res = await api.post('/auth', body);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({ type: LOGOUT });\n"
  },
  {
    "name": "client\\src\\actions\\post.js",
    "content": "import api from '../utils/api';\nimport { setAlert } from './alert';\nimport {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT\n} from './types';\n\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n\n// Get posts\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const res = await api.get('/posts');\n\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add like\nexport const addLike = (id) => async (dispatch) => {\n  try {\n    const res = await api.put(`/posts/like/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Remove like\nexport const removeLike = (id) => async (dispatch) => {\n  try {\n    const res = await api.put(`/posts/unlike/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete post\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.delete(`/posts/${id}`);\n\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n\n    dispatch(setAlert('Post Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add post\nexport const addPost = (formData) => async (dispatch) => {\n  try {\n    const res = await api.post('/posts', formData);\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get post\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    const res = await api.get(`/posts/${id}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  try {\n    const res = await api.post(`/posts/comment/${postId}`, formData);\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n  try {\n    await api.delete(`/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n"
  },
  {
    "name": "client\\src\\actions\\profile.js",
    "content": "import api from '../utils/api';\nimport { setAlert } from './alert';\n\nimport {\n  GET_PROFILE,\n  GET_PROFILES,\n  PROFILE_ERROR,\n  UPDATE_PROFILE,\n  CLEAR_PROFILE,\n  ACCOUNT_DELETED,\n  GET_REPOS,\n  NO_REPOS\n} from './types';\n\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n\n// Get current users profile\nexport const getCurrentProfile = () => async (dispatch) => {\n  try {\n    const res = await api.get('/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get all profiles\nexport const getProfiles = () => async (dispatch) => {\n  dispatch({ type: CLEAR_PROFILE });\n\n  try {\n    const res = await api.get('/profile');\n\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get profile by ID\nexport const getProfileById = (userId) => async (dispatch) => {\n  try {\n    const res = await api.get(`/profile/user/${userId}`);\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get Github repos\nexport const getGithubRepos = (username) => async (dispatch) => {\n  try {\n    const res = await api.get(`/profile/github/${username}`);\n\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: NO_REPOS\n    });\n  }\n};\n\n// Create or update profile\nexport const createProfile =\n  (formData, edit = false) =>\n  async (dispatch) => {\n    try {\n      const res = await api.post('/profile', formData);\n\n      dispatch({\n        type: GET_PROFILE,\n        payload: res.data\n      });\n\n      dispatch(\n        setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success')\n      );\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n    }\n  };\n\n// Add Experience\nexport const addExperience = (formData) => async (dispatch) => {\n  try {\n    const res = await api.put('/profile/experience', formData);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Experience Added', 'success'));\n    return res.data;\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add Education\nexport const addEducation = (formData) => async (dispatch) => {\n  try {\n    const res = await api.put('/profile/education', formData);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Education Added', 'success'));\n    return res.data;\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete experience\nexport const deleteExperience = (id) => async (dispatch) => {\n  try {\n    const res = await api.delete(`/profile/experience/${id}`);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Experience Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete education\nexport const deleteEducation = (id) => async (dispatch) => {\n  try {\n    const res = await api.delete(`/profile/education/${id}`);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Education Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete account & profile\nexport const deleteAccount = () => async (dispatch) => {\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\n    try {\n      await api.delete('/profile');\n\n      dispatch({ type: CLEAR_PROFILE });\n      dispatch({ type: ACCOUNT_DELETED });\n\n      dispatch(setAlert('Your account has been permanently deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n    }\n  }\n};\n"
  },
  {
    "name": "client\\src\\actions\\types.js",
    "content": "export const SET_ALERT = 'SET_ALERT';\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\nexport const USER_LOADED = 'USER_LOADED';\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGOUT = 'LOGOUT';\nexport const GET_PROFILE = 'GET_PROFILE';\nexport const GET_PROFILES = 'GET_PROFILES';\nexport const GET_REPOS = 'GET_REPOS';\nexport const NO_REPOS = 'NO_REPOS';\nexport const UPDATE_PROFILE = 'UPDATE_PROFILE';\nexport const CLEAR_PROFILE = 'CLEAR_PROFILE';\nexport const PROFILE_ERROR = 'PROFILE_ERROR';\nexport const ACCOUNT_DELETED = 'ACCOUNT_DELETED';\nexport const GET_POSTS = 'GET_POSTS';\nexport const GET_POST = 'GET_POST';\nexport const POST_ERROR = 'POST_ERROR';\nexport const UPDATE_LIKES = 'UPDATE_LIKES';\nexport const DELETE_POST = 'DELETE_POST';\nexport const ADD_POST = 'ADD_POST';\nexport const ADD_COMMENT = 'ADD_COMMENT';\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\n"
  },
  {
    "name": "client\\src\\App.css",
    "content": "/* Global Styles */\n:root {\n  --primary-color: #17a2b8;\n  --dark-color: #343a40;\n  --light-color: #f4f4f4;\n  --danger-color: #dc3545;\n  --success-color: #28a745;\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Raleway', sans-serif;\n  font-size: 1rem;\n  line-height: 1.6;\n  background-color: #fff;\n  color: #333;\n}\n\na {\n  color: var(--primary-color);\n  text-decoration: none;\n}\n\nul {\n  list-style: none;\n}\n\nimg {\n  width: 100%;\n}\n\n/* Utilities */\n.container {\n  max-width: 1100px;\n  margin: auto;\n  overflow: hidden;\n  padding: 0 2rem;\n  margin-top: 6rem;\n  margin-bottom: 3rem;\n}\n\n/* Text Styles*/\n.x-large {\n  font-size: 4rem;\n  line-height: 1.2;\n  margin-bottom: 1rem;\n}\n\n.large {\n  font-size: 3rem;\n  line-height: 1.2;\n  margin-bottom: 1rem;\n}\n\n.lead {\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-primary {\n  color: var(--primary-color);\n}\n\n.text-dark {\n  color: var(--dark-color);\n}\n\n/* Padding */\n.p {\n  padding: 0.5rem;\n}\n.p-1 {\n  padding: 1rem;\n}\n.p-2 {\n  padding: 2rem;\n}\n.p-3 {\n  padding: 3rem;\n}\n.py {\n  padding: 0.5rem 0;\n}\n.py-1 {\n  padding: 1rem 0;\n}\n.py-2 {\n  padding: 2rem 0;\n}\n.py-3 {\n  padding: 3rem 0;\n}\n\n/* Margin */\n.m {\n  margin: 0.5rem;\n}\n.m-1 {\n  margin: 1rem;\n}\n.m-2 {\n  margin: 2rem;\n}\n.m-3 {\n  margin: 3rem;\n}\n.my {\n  margin: 0.5rem 0;\n}\n.my-1 {\n  margin: 1rem 0;\n}\n.my-2 {\n  margin: 2rem 0;\n}\n.my-3 {\n  margin: 3rem 0;\n}\n\n.btn {\n  display: inline-block;\n  background: var(--light-color);\n  color: #333;\n  padding: 0.4rem 1.3rem;\n  font-size: 1rem;\n  border: none;\n  cursor: pointer;\n  margin-right: 0.5rem;\n  transition: opacity 0.2s ease-in;\n  outline: none;\n}\n\n.badge {\n  font-size: 0.8rem;\n  padding: 0.1rem;\n  text-align: center;\n  margin: 0.3rem;\n  background: var(--light-color);\n  color: #333;\n}\n\n.alert {\n  padding: 0.8rem;\n  margin: 1rem 0;\n  opacity: 0.9;\n  background: var(--light-color);\n  color: #333;\n}\n\n.btn-primary,\n.bg-primary,\n.badge-primary,\n.alert-primary {\n  background: var(--primary-color);\n  color: #fff;\n}\n\n.btn-light,\n.bg-light,\n.badge-light,\n.alert-light {\n  background: var(--light-color);\n  color: #333;\n}\n\n.btn-dark,\n.bg-dark,\n.badge-dark,\n.alert-dark {\n  background: var(--dark-color);\n  color: #fff;\n}\n\n.btn-danger,\n.bg-danger,\n.badge-danger,\n.alert-danger {\n  background: var(--danger-color);\n  color: #fff;\n}\n\n.btn-success,\n.bg-success,\n.badge-success,\n.alert-success {\n  background: var(--success-color);\n  color: #fff;\n}\n\n.btn-white,\n.bg-white,\n.badge-white,\n.alert-white {\n  background: #fff;\n  color: #333;\n  border: #ccc solid 1px;\n}\n\n.btn:hover {\n  opacity: 0.8;\n}\n\n.bg-light,\n.badge-light {\n  border: #ccc solid 1px;\n}\n\n.round-img {\n  border-radius: 50%;\n}\n\n.line {\n  height: 1px;\n  background: #ccc;\n  margin: 1.5rem 0;\n}\n\n/* Overlay */\n.dark-overlay {\n  background-color: rgba(0, 0, 0, 0.7);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n/* Forms */\n.form .form-group {\n  margin: 1.2rem 0;\n}\n\n.form .form-text {\n  display: block;\n  margin-top: 0.3rem;\n  color: #888;\n}\n\n.form input[type='text'],\n.form input[type='email'],\n.form input[type='password'],\n.form input[type='date'],\n.form select,\n.form textarea {\n  display: block;\n  width: 100%;\n  padding: 0.4rem;\n  font-size: 1.2rem;\n  border: 1px solid #ccc;\n}\n\n.form input[type='submit'],\nbutton {\n  font: inherit;\n}\n\n.form .social-input {\n  display: flex;\n}\n\n.form .social-input i {\n  padding: 0.5rem;\n  width: 4rem;\n}\n\n.form .social-input i.fa-twitter {\n  color: #38a1f3;\n}\n.form .social-input i.fa-facebook {\n  color: #3b5998;\n}\n.form .social-input i.fa-instagram {\n  color: #3f729b;\n}\n.form .social-input i.fa-youtube {\n  color: #c4302b;\n}\n.form .social-input i.fa-linkedin {\n  color: #0077b5;\n}\n\n.table th,\n.table td {\n  padding: 1rem;\n  text-align: left;\n}\n\n.table th {\n  background: var(--light-color);\n}\n\n/* Navbar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.7rem 2rem;\n  position: fixed;\n  z-index: 1;\n  width: 100%;\n  top: 0;\n  border-bottom: solid 1px var(--primary-color);\n  opacity: 0.9;\n}\n\n.navbar ul {\n  display: flex;\n}\n\n.navbar a {\n  color: #fff;\n  padding: 0.45rem;\n  margin: 0 0.25rem;\n}\n\n.navbar a:hover {\n  color: var(--primary-color);\n}\n\n.navbar .welcome span {\n  margin-right: 0.6rem;\n}\n\n/* Landing Page */\n.landing {\n  position: relative;\n  background: url('./img/showcase.jpg') no-repeat center center/cover;\n  height: 100vh;\n}\n\n.landing-inner {\n  color: #fff;\n  height: 100%;\n  width: 80%;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n}\n\n/* Profiles Page */\n.profile {\n  display: grid;\n  grid-template-columns: 2fr 4fr 2fr;\n  align-items: center;\n  grid-gap: 2rem;\n  padding: 1rem;\n  line-height: 1.8;\n  margin-bottom: 1rem;\n}\n\n/* Profile Page */\n.profile-grid {\n  display: grid;\n  grid-template-areas:\n    'top top'\n    'about about'\n    'exp edu'\n    'github github';\n  grid-gap: 1rem;\n}\n\n.profile-top {\n  grid-area: top;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n}\n\n.profile-top img {\n  width: 250px;\n}\n\n.profile-top .icons a {\n  color: #fff;\n  margin: 0 0.3rem;\n}\n\n.profile-top .icons a:hover {\n  color: var(--dark-color);\n}\n\n.profile-about {\n  grid-area: about;\n  text-align: center;\n}\n\n.profile-about .skills {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n}\n\n.profile-exp {\n  grid-area: exp;\n}\n\n.profile-edu {\n  grid-area: edu;\n}\n\n.profile-exp h2,\n.profile-edu h2 {\n  margin-bottom: 1rem;\n}\n\n.profile-exp > div,\n.profile-edu > div {\n  margin-bottom: 1rem;\n  padding-bottom: 1rem;\n  border-bottom: #ccc 1px dotted;\n}\n\n.profile-exp > div:last-child,\n.profile-edu > div:last-child {\n  border: 0;\n}\n\n.profile-exp p,\n.profile-edu p {\n  margin: 0.5rem 0;\n}\n\n.profile-github {\n  grid-area: github;\n}\n\n.profile-github .repo {\n  display: flex;\n}\n\n.profile-github .repo > div:first-child {\n  flex: 7;\n  flex-basis: 70%;\n}\n\n.profile-github > div:last-child {\n  flex: 3;\n  flex-basis: 20%;\n}\n\n/* Posts Page */\n.post-form .post-form-header {\n  background: var(--primary-color);\n  padding: 0.5rem;\n}\n\n.post {\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n  grid-gap: 2rem;\n  align-items: center;\n}\n\n.post > div:first-child {\n  text-align: center;\n}\n\n.post img {\n  width: 100px;\n}\n\n.post .comment-count {\n  background: var(--light-color);\n  color: var(--primary-color);\n  padding: 0.1rem 0.2rem;\n  border-radius: 5px;\n  font-size: 0.8rem;\n}\n\n.post .post-date {\n  color: #aaa;\n  font-size: 0.8rem;\n  margin-bottom: 0.5rem;\n}\n\n/* Mobile Styles */\n@media (max-width: 700px) {\n  .container {\n    margin-top: 8rem;\n  }\n\n  .hide-sm {\n    display: none;\n  }\n\n  /* Text Styles */\n  .x-large {\n    font-size: 3rem;\n  }\n\n  .large {\n    font-size: 2rem;\n  }\n\n  .lead {\n    font-size: 1rem;\n  }\n\n  /* Navbar */\n  .navbar {\n    display: block;\n    text-align: center;\n  }\n\n  .navbar ul {\n    text-align: center;\n    justify-content: center;\n  }\n\n  .navbar h1 {\n    margin-bottom: 1rem;\n  }\n\n  .navbar .welcome {\n    display: none;\n  }\n\n  /* Profiles Page */\n  .profile {\n    grid-template-columns: 1fr;\n    text-align: center;\n  }\n\n  .profile ul {\n    display: none;\n  }\n\n  /* Profile Page */\n\n  .profile-top img,\n  .profile img {\n    width: 200px;\n    margin: auto;\n  }\n\n  .profile-grid {\n    grid-template-areas:\n      'top'\n      'about'\n      'exp'\n      'edu'\n      'github';\n  }\n\n  .profile-about .skills {\n    flex-direction: column;\n  }\n\n  .dash-buttons a {\n    display: block;\n    width: 100%;\n    margin-bottom: 0.2rem;\n  }\n\n  .post {\n    grid-template-columns: 1fr;\n  }\n  .post a,\n  .post button {\n    padding: 0.3rem 0.4rem;\n  }\n}\n\n.alert-wrapper {\n  position: fixed;\n  top: 4rem;\n  right: 2rem;\n  display: inline-block;\n}\n"
  },
  {
    "name": "client\\src\\App.js",
    "content": "import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Landing from './components/layout/Landing';\nimport Register from './components/auth/Register';\nimport Login from './components/auth/Login';\nimport Alert from './components/layout/Alert';\nimport Dashboard from './components/dashboard/Dashboard';\nimport ProfileForm from './components/profile-forms/ProfileForm';\nimport AddExperience from './components/profile-forms/AddExperience';\nimport AddEducation from './components/profile-forms/AddEducation';\nimport Profiles from './components/profiles/Profiles';\nimport Profile from './components/profile/Profile';\nimport Posts from './components/posts/Posts';\nimport Post from './components/post/Post';\nimport NotFound from './components/layout/NotFound';\nimport PrivateRoute from './components/routing/PrivateRoute';\nimport { LOGOUT } from './actions/types';\n\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { loadUser } from './actions/auth';\nimport setAuthToken from './utils/setAuthToken';\n\nimport './App.css';\n\nconst App = () => {\n  useEffect(() => {\n    // check for token in LS when app first runs\n    if (localStorage.token) {\n      // if there is a token set axios headers for all requests\n      setAuthToken(localStorage.token);\n    }\n    // try to fetch a user, if no token or invalid token we\n    // will get a 401 response from our API\n    store.dispatch(loadUser());\n\n    // log user out from all tabs if they log out in one tab\n    window.addEventListener('storage', () => {\n      if (!localStorage.token) store.dispatch({ type: LOGOUT });\n    });\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <Navbar />\n        <Alert />\n        <Routes>\n          <Route path=\"/\" element={<Landing />} />\n          <Route path=\"register\" element={<Register />} />\n          <Route path=\"login\" element={<Login />} />\n          <Route path=\"profiles\" element={<Profiles />} />\n          <Route path=\"profile/:id\" element={<Profile />} />\n          <Route\n            path=\"dashboard\"\n            element={<PrivateRoute component={Dashboard} />}\n          />\n          <Route\n            path=\"create-profile\"\n            element={<PrivateRoute component={ProfileForm} />}\n          />\n          <Route\n            path=\"edit-profile\"\n            element={<PrivateRoute component={ProfileForm} />}\n          />\n          <Route\n            path=\"add-experience\"\n            element={<PrivateRoute component={AddExperience} />}\n          />\n          <Route\n            path=\"add-education\"\n            element={<PrivateRoute component={AddEducation} />}\n          />\n          <Route path=\"posts\" element={<PrivateRoute component={Posts} />} />\n          <Route path=\"posts/:id\" element={<PrivateRoute component={Post} />} />\n          <Route path=\"/*\" element={<NotFound />} />\n        </Routes>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n"
  },
  {
    "name": "client\\src\\components\\auth\\Login.js",
    "content": "import React, { useState } from 'react';\nimport { Link, Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../actions/auth';\n\nconst Login = ({ login, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n\n  const { email, password } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    login(email, password);\n  };\n\n  if (isAuthenticated) {\n    return <Navigate to=\"/dashboard\" />;\n  }\n\n  return (\n    <section className=\"container\">\n      <h1 className=\"large text-primary\">Sign In</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-user\" /> Sign Into Your Account\n      </p>\n      <form className=\"form\" onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <input\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={onChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={password}\n            onChange={onChange}\n            minLength=\"6\"\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Login\" />\n      </form>\n      <p className=\"my-1\">\n        Don't have an account? <Link to=\"/register\">Sign Up</Link>\n      </p>\n    </section>\n  );\n};\n\nLogin.propTypes = {\n  login: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n"
  },
  {
    "name": "client\\src\\components\\auth\\Register.js",
    "content": "import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\nimport { setAlert } from '../../actions/alert';\nimport { register } from '../../actions/auth';\nimport PropTypes from 'prop-types';\n\nconst Register = ({ setAlert, register, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    password2: ''\n  });\n\n  const { name, email, password, password2 } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (password !== password2) {\n      setAlert('Passwords do not match', 'danger');\n    } else {\n      register({ name, email, password });\n    }\n  };\n\n  if (isAuthenticated) {\n    return <Navigate to=\"/dashboard\" />;\n  }\n\n  return (\n    <section className=\"container\">\n      <h1 className=\"large text-primary\">Sign Up</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-user\" /> Create Your Account\n      </p>\n      <form className=\"form\" onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            value={name}\n            onChange={onChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            onChange={onChange}\n          />\n          <small className=\"form-text\">\n            This site uses Gravatar so if you want a profile image, use a\n            Gravatar email\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={password}\n            onChange={onChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            value={password2}\n            onChange={onChange}\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n      </form>\n      <p className=\"my-1\">\n        Already have an account? <Link to=\"/login\">Sign In</Link>\n      </p>\n    </section>\n  );\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, { setAlert, register })(Register);\n"
  },
  {
    "name": "client\\src\\components\\dashboard\\Dashboard.js",
    "content": "import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport DashboardActions from './DashboardActions';\nimport Experience from './Experience';\nimport Education from './Education';\nimport { getCurrentProfile, deleteAccount } from '../../actions/profile';\n\nconst Dashboard = ({\n  getCurrentProfile,\n  deleteAccount,\n  auth: { user },\n  profile: { profile }\n}) => {\n  useEffect(() => {\n    getCurrentProfile();\n  }, [getCurrentProfile]);\n\n  return (\n    <section className=\"container\">\n      <h1 className=\"large text-primary\">Dashboard</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-user\" /> Welcome {user && user.name}\n      </p>\n      {profile !== null ? (\n        <>\n          <DashboardActions />\n          <Experience experience={profile.experience} />\n          <Education education={profile.education} />\n\n          <div className=\"my-2\">\n            <button className=\"btn btn-danger\" onClick={() => deleteAccount()}>\n              <i className=\"fas fa-user-minus\" /> Delete My Account\n            </button>\n          </div>\n        </>\n      ) : (\n        <>\n          <p>You have not yet setup a profile, please add some info</p>\n          <Link to=\"/create-profile\" className=\"btn btn-primary my-1\">\n            Create Profile\n          </Link>\n        </>\n      )}\n    </section>\n  );\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  deleteAccount: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getCurrentProfile, deleteAccount })(\n  Dashboard\n);\n"
  },
  {
    "name": "client\\src\\components\\dashboard\\DashboardActions.js",
    "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst DashboardActions = () => {\n  return (\n    <div className='dash-buttons'>\n      <Link to='/edit-profile' className='btn btn-light'>\n        <i className='fas fa-user-circle text-primary' /> Edit Profile\n      </Link>\n      <Link to='/add-experience' className='btn btn-light'>\n        <i className='fab fa-black-tie text-primary' /> Add Experience\n      </Link>\n      <Link to='/add-education' className='btn btn-light'>\n        <i className='fas fa-graduation-cap text-primary' /> Add Education\n      </Link>\n    </div>\n  );\n};\n\nexport default DashboardActions;\n"
  },
  {
    "name": "client\\src\\components\\dashboard\\Education.js",
    "content": "import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteEducation } from '../../actions/profile';\nimport formatDate from '../../utils/formatDate';\n\nconst Education = ({ education, deleteEducation }) => {\n  const educations = education.map((edu) => (\n    <tr key={edu._id}>\n      <td>{edu.school}</td>\n      <td className=\"hide-sm\">{edu.degree}</td>\n      <td>\n        {formatDate(edu.from)} - {edu.to ? formatDate(edu.to) : 'Now'}\n      </td>\n      <td>\n        <button\n          onClick={() => deleteEducation(edu._id)}\n          className=\"btn btn-danger\"\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  ));\n\n  return (\n    <Fragment>\n      <h2 className=\"my-2\">Education Credentials</h2>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>School</th>\n            <th className=\"hide-sm\">Degree</th>\n            <th className=\"hide-sm\">Years</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>{educations}</tbody>\n      </table>\n    </Fragment>\n  );\n};\n\nEducation.propTypes = {\n  education: PropTypes.array.isRequired,\n  deleteEducation: PropTypes.func.isRequired\n};\n\nexport default connect(null, { deleteEducation })(Education);\n"
  },
  {
    "name": "client\\src\\components\\dashboard\\Experience.js",
    "content": "import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExperience } from '../../actions/profile';\nimport formatDate from '../../utils/formatDate';\n\nconst Experience = ({ experience, deleteExperience }) => {\n  const experiences = experience.map((exp) => (\n    <tr key={exp._id}>\n      <td>{exp.company}</td>\n      <td className=\"hide-sm\">{exp.title}</td>\n      <td>\n        {formatDate(exp.from)} - {exp.to ? formatDate(exp.to) : 'Now'}\n      </td>\n      <td>\n        <button\n          onClick={() => deleteExperience(exp._id)}\n          className=\"btn btn-danger\"\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  ));\n\n  return (\n    <Fragment>\n      <h2 className=\"my-2\">Experience Credentials</h2>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Company</th>\n            <th className=\"hide-sm\">Title</th>\n            <th className=\"hide-sm\">Years</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>{experiences}</tbody>\n      </table>\n    </Fragment>\n  );\n};\n\nExperience.propTypes = {\n  experience: PropTypes.array.isRequired,\n  deleteExperience: PropTypes.func.isRequired\n};\n\nexport default connect(null, { deleteExperience })(Experience);\n"
  },
  {
    "name": "client\\src\\components\\layout\\Alert.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst Alert = ({ alerts }) => (\n  <div className=\"alert-wrapper\">\n    {alerts.map((alert) => (\n      <div key={alert.id} className={`alert alert-${alert.alertType}`}>\n        {alert.msg}\n      </div>\n    ))}\n  </div>\n);\n\nAlert.propTypes = {\n  alerts: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  alerts: state.alert\n});\n\nexport default connect(mapStateToProps)(Alert);\n"
  },
  {
    "name": "client\\src\\components\\layout\\Landing.js",
    "content": "import React from 'react';\nimport { Link, Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst Landing = ({ isAuthenticated }) => {\n  if (isAuthenticated) {\n    return <Navigate to=\"/dashboard\" />;\n  }\n\n  return (\n    <section className=\"landing\">\n      <div className=\"dark-overlay\">\n        <div className=\"landing-inner\">\n          <h1 className=\"x-large\">Developer Connector</h1>\n          <p className=\"lead\">\n            Create a developer profile/portfolio, share posts and get help from\n            other developers\n          </p>\n          <div className=\"buttons\">\n            <Link to=\"/register\" className=\"btn btn-primary\">\n              Sign Up\n            </Link>\n            <Link to=\"/login\" className=\"btn btn-light\">\n              Login\n            </Link>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nLanding.propTypes = {\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps)(Landing);\n"
  },
  {
    "name": "client\\src\\components\\layout\\Navbar.js",
    "content": "import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { logout } from '../../actions/auth';\n\nconst Navbar = ({ auth: { isAuthenticated }, logout }) => {\n  const authLinks = (\n    <ul>\n      <li>\n        <Link to=\"/profiles\">Developers</Link>\n      </li>\n      <li>\n        <Link to=\"/posts\">Posts</Link>\n      </li>\n      <li>\n        <Link to=\"/dashboard\">\n          <i className=\"fas fa-user\" />{' '}\n          <span className=\"hide-sm\">Dashboard</span>\n        </Link>\n      </li>\n      <li>\n        <a onClick={logout} href=\"#!\">\n          <i className=\"fas fa-sign-out-alt\" />{' '}\n          <span className=\"hide-sm\">Logout</span>\n        </a>\n      </li>\n    </ul>\n  );\n\n  const guestLinks = (\n    <ul>\n      <li>\n        <Link to=\"/profiles\">Developers</Link>\n      </li>\n      <li>\n        <Link to=\"/register\">Register</Link>\n      </li>\n      <li>\n        <Link to=\"/login\">Login</Link>\n      </li>\n    </ul>\n  );\n\n  return (\n    <nav className=\"navbar bg-dark\">\n      <h1>\n        <Link to=\"/\">\n          <i className=\"fas fa-code\" /> DevConnector\n        </Link>\n      </h1>\n      <Fragment>{isAuthenticated ? authLinks : guestLinks}</Fragment>\n    </nav>\n  );\n};\n\nNavbar.propTypes = {\n  logout: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, { logout })(Navbar);\n"
  },
  {
    "name": "client\\src\\components\\layout\\NotFound.js",
    "content": "import React from 'react';\n\nconst NotFound = () => {\n  return (\n    <section className=\"container\">\n      <h1 className=\"x-large text-primary\">\n        <i className=\"fas fa-exclamation-triangle\" /> Page Not Found\n      </h1>\n      <p className=\"large\">Sorry, this page does not exist</p>\n    </section>\n  );\n};\n\nexport default NotFound;\n"
  },
  {
    "name": "client\\src\\components\\layout\\Spinner.js",
    "content": "import React, { Fragment } from 'react';\nimport spinner from './spinner.gif';\n\nconst Spinner = () => (\n  <Fragment>\n    <img\n      src={spinner}\n      style={{ width: '200px', margin: 'auto', display: 'block' }}\n      alt=\"Loading...\"\n    />\n  </Fragment>\n);\n\nexport default Spinner;\n"
  },
  {
    "name": "client\\src\\components\\post\\CommentForm.js",
    "content": "import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addComment } from '../../actions/post';\n\nconst CommentForm = ({ postId, addComment }) => {\n  const [text, setText] = useState('');\n\n  return (\n    <div className='post-form'>\n      <div className='bg-primary p'>\n        <h3>Leave a Comment</h3>\n      </div>\n      <form\n        className='form my-1'\n        onSubmit={e => {\n          e.preventDefault();\n          addComment(postId, { text });\n          setText('');\n        }}\n      >\n        <textarea\n          name='text'\n          cols='30'\n          rows='5'\n          placeholder='Comment the post'\n          value={text}\n          onChange={e => setText(e.target.value)}\n          required\n        />\n        <input type='submit' className='btn btn-dark my-1' value='Submit' />\n      </form>\n    </div>\n  );\n};\n\nCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { addComment }\n)(CommentForm);\n"
  },
  {
    "name": "client\\src\\components\\post\\CommentItem.js",
    "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport formatDate from '../../utils/formatDate';\nimport { deleteComment } from '../../actions/post';\n\nconst CommentItem = ({\n  postId,\n  comment: { _id, text, name, avatar, user, date },\n  auth,\n  deleteComment\n}) => (\n  <div className=\"post bg-white p-1 my-1\">\n    <div>\n      <Link to={`/profile/${user}`}>\n        <img className=\"round-img\" src={avatar} alt=\"\" />\n        <h4>{name}</h4>\n      </Link>\n    </div>\n    <div>\n      <p className=\"my-1\">{text}</p>\n      <p className=\"post-date\">Posted on {formatDate(date)}</p>\n      {!auth.loading && user === auth.user._id && (\n        <button\n          onClick={() => deleteComment(postId, _id)}\n          type=\"button\"\n          className=\"btn btn-danger\"\n        >\n          <i className=\"fas fa-times\" />\n        </button>\n      )}\n    </div>\n  </div>\n);\n\nCommentItem.propTypes = {\n  postId: PropTypes.string.isRequired,\n  comment: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  deleteComment: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, { deleteComment })(CommentItem);\n"
  },
  {
    "name": "client\\src\\components\\post\\Post.js",
    "content": "import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useParams } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport PostItem from '../posts/PostItem';\nimport CommentForm from '../post/CommentForm';\nimport CommentItem from '../post/CommentItem';\nimport { getPost } from '../../actions/post';\n\nconst Post = ({ getPost, post: { post, loading } }) => {\n  const { id } = useParams();\n  useEffect(() => {\n    getPost(id);\n  }, [getPost, id]);\n\n  return loading || post === null ? (\n    <Spinner />\n  ) : (\n    <section className=\"container\">\n      <Link to=\"/posts\" className=\"btn\">\n        Back To Posts\n      </Link>\n      <PostItem post={post} showActions={false} />\n      <CommentForm postId={post._id} />\n      <div className=\"comments\">\n        {post.comments.map((comment) => (\n          <CommentItem key={comment._id} comment={comment} postId={post._id} />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nPost.propTypes = {\n  getPost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post\n});\n\nexport default connect(mapStateToProps, { getPost })(Post);\n"
  },
  {
    "name": "client\\src\\components\\posts\\PostForm.js",
    "content": "import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addPost } from '../../actions/post';\n\nconst PostForm = ({ addPost }) => {\n  const [text, setText] = useState('');\n\n  return (\n    <div className='post-form'>\n      <div className='bg-primary p'>\n        <h3>Say Something...</h3>\n      </div>\n      <form\n        className='form my-1'\n        onSubmit={e => {\n          e.preventDefault();\n          addPost({ text });\n          setText('');\n        }}\n      >\n        <textarea\n          name='text'\n          cols='30'\n          rows='5'\n          placeholder='Create a post'\n          value={text}\n          onChange={e => setText(e.target.value)}\n          required\n        />\n        <input type='submit' className='btn btn-dark my-1' value='Submit' />\n      </form>\n    </div>\n  );\n};\n\nPostForm.propTypes = {\n  addPost: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { addPost }\n)(PostForm);\n"
  },
  {
    "name": "client\\src\\components\\posts\\PostItem.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport formatDate from '../../utils/formatDate';\nimport { connect } from 'react-redux';\nimport { addLike, removeLike, deletePost } from '../../actions/post';\n\nconst PostItem = ({\n  addLike,\n  removeLike,\n  deletePost,\n  auth,\n  post: { _id, text, name, avatar, user, likes, comments, date }\n}) => (\n  <div className=\"post bg-white p-1 my-1\">\n    <div>\n      <Link to={`/profile/${user}`}>\n        <img className=\"round-img\" src={avatar} alt=\"\" />\n        <h4>{name}</h4>\n      </Link>\n    </div>\n    <div>\n      <p className=\"my-1\">{text}</p>\n      <p className=\"post-date\">Posted on {formatDate(date)}</p>\n\n      <button\n        onClick={() => addLike(_id)}\n        type=\"button\"\n        className=\"btn btn-light\"\n      >\n        <i className=\"fas fa-thumbs-up\" />{' '}\n        <span>{likes.length > 0 && <span>{likes.length}</span>}</span>\n      </button>\n      <button\n        onClick={() => removeLike(_id)}\n        type=\"button\"\n        className=\"btn btn-light\"\n      >\n        <i className=\"fas fa-thumbs-down\" />\n      </button>\n      <Link to={`/posts/${_id}`} className=\"btn btn-primary\">\n        Discussion{' '}\n        {comments.length > 0 && (\n          <span className=\"comment-count\">{comments.length}</span>\n        )}\n      </Link>\n      {!auth.loading && user === auth.user._id && (\n        <button\n          onClick={() => deletePost(_id)}\n          type=\"button\"\n          className=\"btn btn-danger\"\n        >\n          <i className=\"fas fa-times\" />\n        </button>\n      )}\n    </div>\n  </div>\n);\n\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  addLike: PropTypes.func.isRequired,\n  removeLike: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, { addLike, removeLike, deletePost })(\n  PostItem\n);\n"
  },
  {
    "name": "client\\src\\components\\posts\\Posts.js",
    "content": "import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport PostItem from './PostItem';\nimport PostForm from './PostForm';\nimport { getPosts } from '../../actions/post';\n\nconst Posts = ({ getPosts, post: { posts } }) => {\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  return (\n    <section className=\"container\">\n      <h1 className=\"large text-primary\">Posts</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-user\" /> Welcome to the community\n      </p>\n      <PostForm />\n      <div className=\"posts\">\n        {posts.map((post) => (\n          <PostItem key={post._id} post={post} />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nPosts.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  post: state.post\n});\n\nexport default connect(mapStateToProps, { getPosts })(Posts);\n"
  },
  {
    "name": "client\\src\\components\\profile\\Profile.js",
    "content": "import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useParams } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport ProfileTop from './ProfileTop';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileExperience from './ProfileExperience';\nimport ProfileEducation from './ProfileEducation';\nimport ProfileGithub from './ProfileGithub';\nimport { getProfileById } from '../../actions/profile';\n\nconst Profile = ({ getProfileById, profile: { profile }, auth }) => {\n  const { id } = useParams();\n  useEffect(() => {\n    getProfileById(id);\n  }, [getProfileById, id]);\n\n  return (\n    <section className=\"container\">\n      {profile === null ? (\n        <Spinner />\n      ) : (\n        <Fragment>\n          <Link to=\"/profiles\" className=\"btn btn-light\">\n            Back To Profiles\n          </Link>\n          {auth.isAuthenticated &&\n            auth.loading === false &&\n            auth.user._id === profile.user._id && (\n              <Link to=\"/edit-profile\" className=\"btn btn-dark\">\n                Edit Profile\n              </Link>\n            )}\n          <div className=\"profile-grid my-1\">\n            <ProfileTop profile={profile} />\n            <ProfileAbout profile={profile} />\n            <div className=\"profile-exp bg-white p-2\">\n              <h2 className=\"text-primary\">Experience</h2>\n              {profile.experience.length > 0 ? (\n                <Fragment>\n                  {profile.experience.map((experience) => (\n                    <ProfileExperience\n                      key={experience._id}\n                      experience={experience}\n                    />\n                  ))}\n                </Fragment>\n              ) : (\n                <h4>No experience credentials</h4>\n              )}\n            </div>\n\n            <div className=\"profile-edu bg-white p-2\">\n              <h2 className=\"text-primary\">Education</h2>\n              {profile.education.length > 0 ? (\n                <Fragment>\n                  {profile.education.map((education) => (\n                    <ProfileEducation\n                      key={education._id}\n                      education={education}\n                    />\n                  ))}\n                </Fragment>\n              ) : (\n                <h4>No education credentials</h4>\n              )}\n            </div>\n\n            {profile.githubusername && (\n              <ProfileGithub username={profile.githubusername} />\n            )}\n          </div>\n        </Fragment>\n      )}\n    </section>\n  );\n};\n\nProfile.propTypes = {\n  getProfileById: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  profile: state.profile,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, { getProfileById })(Profile);\n"
  },
  {
    "name": "client\\src\\components\\profile\\ProfileAbout.js",
    "content": "import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ProfileAbout = ({\n  profile: {\n    bio,\n    skills,\n    user: { name }\n  }\n}) => (\n  <div className='profile-about bg-light p-2'>\n    {bio && (\n      <Fragment>\n        <h2 className='text-primary'>{name.trim().split(' ')[0]}s Bio</h2>\n        <p>{bio}</p>\n        <div className='line' />\n      </Fragment>\n    )}\n    <h2 className='text-primary'>Skill Set</h2>\n    <div className='skills'>\n      {skills.map((skill, index) => (\n        <div key={index} className='p-1'>\n          <i className='fas fa-check' /> {skill}\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nProfileAbout.propTypes = {\n  profile: PropTypes.object.isRequired\n};\n\nexport default ProfileAbout;\n"
  },
  {
    "name": "client\\src\\components\\profile\\ProfileEducation.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport formatDate from '../../utils/formatDate';\n\nconst ProfileEducation = ({\n  education: { school, degree, fieldofstudy, current, to, from, description }\n}) => (\n  <div>\n    <h3 className=\"text-dark\">{school}</h3>\n    <p>\n      {formatDate(from)} - {to ? formatDate(to) : 'Now'}\n    </p>\n    <p>\n      <strong>Degree: </strong> {degree}\n    </p>\n    <p>\n      <strong>Field Of Study: </strong> {fieldofstudy}\n    </p>\n    <p>\n      <strong>Description: </strong> {description}\n    </p>\n  </div>\n);\n\nProfileEducation.propTypes = {\n  education: PropTypes.object.isRequired\n};\n\nexport default ProfileEducation;\n"
  },
  {
    "name": "client\\src\\components\\profile\\ProfileExperience.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport formatDate from '../../utils/formatDate';\n\nconst ProfileExperience = ({\n  experience: { company, title, location, current, to, from, description }\n}) => (\n  <div>\n    <h3 className=\"text-dark\">{company}</h3>\n    <p>\n      {formatDate(from)} - {to ? formatDate(to) : 'Now'}\n    </p>\n    <p>\n      <strong>Position: </strong> {title}\n    </p>\n    <p>\n      <strong>Location: </strong> {location}\n    </p>\n    <p>\n      <strong>Description: </strong> {description}\n    </p>\n  </div>\n);\n\nProfileExperience.propTypes = {\n  experience: PropTypes.object.isRequired\n};\n\nexport default ProfileExperience;\n"
  },
  {
    "name": "client\\src\\components\\profile\\ProfileGithub.js",
    "content": "import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\n\nconst ProfileGithub = ({ username, getGithubRepos, repos }) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos, username]);\n\n  return (\n    <div className=\"profile-github\">\n      <h2 className=\"text-primary my-1\">Github Repos</h2>\n      {repos.map(repo => (\n        <div key={repo.id} className=\"repo bg-white p-1 my-1\">\n          <div>\n            <h4>\n              <a href={repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {repo.name}\n              </a>\n            </h4>\n            <p>{repo.description}</p>\n          </div>\n          <div>\n            <ul>\n              <li className=\"badge badge-primary\">\n                Stars: {repo.stargazers_count}\n              </li>\n              <li className=\"badge badge-dark\">\n                Watchers: {repo.watchers_count}\n              </li>\n              <li className=\"badge badge-light\">Forks: {repo.forks_count}</li>\n            </ul>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\n"
  },
  {
    "name": "client\\src\\components\\profile\\ProfileTop.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ProfileTop = ({\n  profile: {\n    status,\n    company,\n    location,\n    website,\n    social,\n    user: { name, avatar }\n  }\n}) => {\n  return (\n    <div className=\"profile-top bg-primary p-2\">\n      <img className=\"round-img my-1\" src={avatar} alt=\"\" />\n      <h1 className=\"large\">{name}</h1>\n      <p className=\"lead\">\n        {status} {company ? <span> at {company}</span> : null}\n      </p>\n      <p>{location ? <span>{location}</span> : null}</p>\n      <div className=\"icons my-1\">\n        {website ? (\n          <a href={website} target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className=\"fas fa-globe fa-2x\" />\n          </a>\n        ) : null}\n        {social\n          ? Object.entries(social)\n              .filter(([_, value]) => value)\n              .map(([key, value]) => (\n                <a\n                  key={key}\n                  href={value}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <i className={`fab fa-${key} fa-2x`}></i>\n                </a>\n              ))\n          : null}\n      </div>\n    </div>\n  );\n};\n\nProfileTop.propTypes = {\n  profile: PropTypes.object.isRequired\n};\n\nexport default ProfileTop;\n"
  },
  {
    "name": "client\\src\\components\\profile-forms\\AddEducation.js",
    "content": "import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addEducation } from '../../actions/profile';\n\nconst AddEducation = ({ addEducation }) => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    school: '',\n    degree: '',\n    fieldofstudy: '',\n    from: '',\n    to: '',\n    current: false,\n    description: ''\n  });\n\n  const { school, degree, fieldofstudy, from, to, description, current } =\n    formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  return (\n    <section className=\"container\">\n      <h1 className=\"large text-primary\">Add Your Education</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-code-branch\" /> Add any school or bootcamp that you\n        have attended\n      </p>\n      <small>* = required field</small>\n      <form\n        className=\"form\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          addEducation(formData).then(() => navigate('/dashboard'));\n        }}\n      >\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"* School or Bootcamp\"\n            name=\"school\"\n            value={school}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"* Degree or Certificate\"\n            name=\"degree\"\n            value={degree}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Field of Study\"\n            name=\"fieldofstudy\"\n            value={fieldofstudy}\n            onChange={onChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <h4>From Date</h4>\n          <input type=\"date\" name=\"from\" value={from} onChange={onChange} />\n        </div>\n        <div className=\"form-group\">\n          <p>\n            <input\n              type=\"checkbox\"\n              name=\"current\"\n              checked={current}\n              value={current}\n              onChange={() => setFormData({ ...formData, current: !current })}\n            />{' '}\n            Current School\n          </p>\n        </div>\n        <div className=\"form-group\">\n          <h4>To Date</h4>\n          <input\n            type=\"date\"\n            name=\"to\"\n            value={to}\n            onChange={onChange}\n            disabled={current}\n          />\n        </div>\n        <div className=\"form-group\">\n          <textarea\n            name=\"description\"\n            cols=\"30\"\n            rows=\"5\"\n            placeholder=\"Program Description\"\n            value={description}\n            onChange={onChange}\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\n        <Link className=\"btn btn-light my-1\" to=\"/dashboard\">\n          Go Back\n        </Link>\n      </form>\n    </section>\n  );\n};\n\nAddEducation.propTypes = {\n  addEducation: PropTypes.func.isRequired\n};\n\nexport default connect(null, { addEducation })(AddEducation);\n"
  },
  {
    "name": "client\\src\\components\\profile-forms\\AddExperience.js",
    "content": "import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addExperience } from '../../actions/profile';\n\nconst AddExperience = ({ addExperience }) => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    company: '',\n    title: '',\n    location: '',\n    from: '',\n    to: '',\n    current: false,\n    description: ''\n  });\n\n  const { company, title, location, from, to, current, description } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  return (\n    <section className=\"container\">\n      <h1 className=\"large text-primary\">Add An Experience</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-code-branch\" /> Add any developer/programming\n        positions that you have had in the past\n      </p>\n      <small>* = required field</small>\n      <form\n        className=\"form\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          addExperience(formData).then(() => navigate('/dashboard'));\n        }}\n      >\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"* Job Title\"\n            name=\"title\"\n            value={title}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"* Company\"\n            name=\"company\"\n            value={company}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Location\"\n            name=\"location\"\n            value={location}\n            onChange={onChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <h4>From Date</h4>\n          <input type=\"date\" name=\"from\" value={from} onChange={onChange} />\n        </div>\n        <div className=\"form-group\">\n          <p>\n            <input\n              type=\"checkbox\"\n              name=\"current\"\n              checked={current}\n              value={current}\n              onChange={() => {\n                setFormData({ ...formData, current: !current });\n              }}\n            />{' '}\n            Current Job\n          </p>\n        </div>\n        <div className=\"form-group\">\n          <h4>To Date</h4>\n          <input\n            type=\"date\"\n            name=\"to\"\n            value={to}\n            onChange={onChange}\n            disabled={current}\n          />\n        </div>\n        <div className=\"form-group\">\n          <textarea\n            name=\"description\"\n            cols=\"30\"\n            rows=\"5\"\n            placeholder=\"Job Description\"\n            value={description}\n            onChange={onChange}\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\n        <Link className=\"btn btn-light my-1\" to=\"/dashboard\">\n          Go Back\n        </Link>\n      </form>\n    </section>\n  );\n};\n\nAddExperience.propTypes = {\n  addExperience: PropTypes.func.isRequired\n};\n\nexport default connect(null, { addExperience })(AddExperience);\n"
  },
  {
    "name": "client\\src\\components\\profile-forms\\ProfileForm.js",
    "content": "import React, { Fragment, useState, useEffect } from 'react';\nimport { Link, useMatch, useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createProfile, getCurrentProfile } from '../../actions/profile';\n\n/*\n  NOTE: declare initialState outside of component\n  so that it doesn't trigger a useEffect\n  we can then safely use this to construct our profileData\n */\nconst initialState = {\n  company: '',\n  website: '',\n  location: '',\n  status: '',\n  skills: '',\n  githubusername: '',\n  bio: '',\n  twitter: '',\n  facebook: '',\n  linkedin: '',\n  youtube: '',\n  instagram: ''\n};\n\nconst ProfileForm = ({\n  profile: { profile, loading },\n  createProfile,\n  getCurrentProfile\n}) => {\n  const [formData, setFormData] = useState(initialState);\n\n  const creatingProfile = useMatch('/create-profile');\n\n  const [displaySocialInputs, toggleSocialInputs] = useState(false);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // if there is no profile, attempt to fetch one\n    if (!profile) getCurrentProfile();\n\n    // if we finished loading and we do have a profile\n    // then build our profileData\n    if (!loading && profile) {\n      const profileData = { ...initialState };\n      for (const key in profile) {\n        if (key in profileData) profileData[key] = profile[key];\n      }\n      for (const key in profile.social) {\n        if (key in profileData) profileData[key] = profile.social[key];\n      }\n      // the skills may be an array from our API response\n      if (Array.isArray(profileData.skills))\n        profileData.skills = profileData.skills.join(', ');\n      // set local state with the profileData\n      setFormData(profileData);\n    }\n  }, [loading, getCurrentProfile, profile]);\n\n  const {\n    company,\n    website,\n    location,\n    status,\n    skills,\n    githubusername,\n    bio,\n    twitter,\n    facebook,\n    linkedin,\n    youtube,\n    instagram\n  } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    const editing = profile ? true : false;\n    e.preventDefault();\n    createProfile(formData, editing).then(() => {\n      if (!editing) navigate('/dashboard');\n    });\n  };\n\n  return (\n    <section className=\"container\">\n      <h1 className=\"large text-primary\">\n        {creatingProfile ? 'Create Your Profile' : 'Edit Your Profile'}\n      </h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-user\" />\n        {creatingProfile\n          ? ` Let's get some information to make your`\n          : ' Add some changes to your profile'}\n      </p>\n      <small>* = required field</small>\n      <form className=\"form\" onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <select name=\"status\" value={status} onChange={onChange}>\n            <option>* Select Professional Status</option>\n            <option value=\"Developer\">Developer</option>\n            <option value=\"Junior Developer\">Junior Developer</option>\n            <option value=\"Senior Developer\">Senior Developer</option>\n            <option value=\"Manager\">Manager</option>\n            <option value=\"Student or Learning\">Student or Learning</option>\n            <option value=\"Instructor\">Instructor or Teacher</option>\n            <option value=\"Intern\">Intern</option>\n            <option value=\"Other\">Other</option>\n          </select>\n          <small className=\"form-text\">\n            Give us an idea of where you are at in your career\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Company\"\n            name=\"company\"\n            value={company}\n            onChange={onChange}\n          />\n          <small className=\"form-text\">\n            Could be your own company or one you work for\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Website\"\n            name=\"website\"\n            value={website}\n            onChange={onChange}\n          />\n          <small className=\"form-text\">\n            Could be your own or a company website\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Location\"\n            name=\"location\"\n            value={location}\n            onChange={onChange}\n          />\n          <small className=\"form-text\">\n            City & state suggested (eg. Boston, MA)\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"* Skills\"\n            name=\"skills\"\n            value={skills}\n            onChange={onChange}\n          />\n          <small className=\"form-text\">\n            Please use comma separated values (eg. HTML,CSS,JavaScript,PHP)\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            placeholder=\"Github Username\"\n            name=\"githubusername\"\n            value={githubusername}\n            onChange={onChange}\n          />\n          <small className=\"form-text\">\n            If you want your latest repos and a Github link, include your\n            username\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <textarea\n            placeholder=\"A short bio of yourself\"\n            name=\"bio\"\n            value={bio}\n            onChange={onChange}\n          />\n          <small className=\"form-text\">Tell us a little about yourself</small>\n        </div>\n\n        <div className=\"my-2\">\n          <button\n            onClick={() => toggleSocialInputs(!displaySocialInputs)}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            Add Social Network Links\n          </button>\n          <span>Optional</span>\n        </div>\n\n        {displaySocialInputs && (\n          <Fragment>\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-twitter fa-2x\" />\n              <input\n                type=\"text\"\n                placeholder=\"Twitter URL\"\n                name=\"twitter\"\n                value={twitter}\n                onChange={onChange}\n              />\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-facebook fa-2x\" />\n              <input\n                type=\"text\"\n                placeholder=\"Facebook URL\"\n                name=\"facebook\"\n                value={facebook}\n                onChange={onChange}\n              />\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-youtube fa-2x\" />\n              <input\n                type=\"text\"\n                placeholder=\"YouTube URL\"\n                name=\"youtube\"\n                value={youtube}\n                onChange={onChange}\n              />\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-linkedin fa-2x\" />\n              <input\n                type=\"text\"\n                placeholder=\"Linkedin URL\"\n                name=\"linkedin\"\n                value={linkedin}\n                onChange={onChange}\n              />\n            </div>\n\n            <div className=\"form-group social-input\">\n              <i className=\"fab fa-instagram fa-2x\" />\n              <input\n                type=\"text\"\n                placeholder=\"Instagram URL\"\n                name=\"instagram\"\n                value={instagram}\n                onChange={onChange}\n              />\n            </div>\n          </Fragment>\n        )}\n\n        <input type=\"submit\" className=\"btn btn-primary my-1\" />\n        <Link className=\"btn btn-light my-1\" to=\"/dashboard\">\n          Go Back\n        </Link>\n      </form>\n    </section>\n  );\n};\n\nProfileForm.propTypes = {\n  createProfile: PropTypes.func.isRequired,\n  getCurrentProfile: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { createProfile, getCurrentProfile })(\n  ProfileForm\n);\n"
  },
  {
    "name": "client\\src\\components\\profiles\\ProfileItem.js",
    "content": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst ProfileItem = ({\n  profile: {\n    user: { _id, name, avatar },\n    status,\n    company,\n    location,\n    skills\n  }\n}) => {\n  return (\n    <div className='profile bg-light'>\n      <img src={avatar} alt='' className='round-img' />\n      <div>\n        <h2>{name}</h2>\n        <p>\n          {status} {company && <span> at {company}</span>}\n        </p>\n        <p className='my-1'>{location && <span>{location}</span>}</p>\n        <Link to={`/profile/${_id}`} className='btn btn-primary'>\n          View Profile\n        </Link>\n      </div>\n      <ul>\n        {skills.slice(0, 4).map((skill, index) => (\n          <li key={index} className='text-primary'>\n            <i className='fas fa-check' /> {skill}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nProfileItem.propTypes = {\n  profile: PropTypes.object.isRequired\n};\n\nexport default ProfileItem;\n"
  },
  {
    "name": "client\\src\\components\\profiles\\Profiles.js",
    "content": "import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport ProfileItem from './ProfileItem';\nimport { getProfiles } from '../../actions/profile';\n\nconst Profiles = ({ getProfiles, profile: { profiles, loading } }) => {\n  useEffect(() => {\n    getProfiles();\n  }, [getProfiles]);\n\n  return (\n    <section className=\"container\">\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Fragment>\n          <h1 className=\"large text-primary\">Developers</h1>\n          <p className=\"lead\">\n            <i className=\"fab fa-connectdevelop\" /> Browse and connect with\n            developers\n          </p>\n          <div className=\"profiles\">\n            {profiles.length > 0 ? (\n              profiles.map((profile) => (\n                <ProfileItem key={profile._id} profile={profile} />\n              ))\n            ) : (\n              <h4>No profiles found...</h4>\n            )}\n          </div>\n        </Fragment>\n      )}\n    </section>\n  );\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, { getProfiles })(Profiles);\n"
  },
  {
    "name": "client\\src\\components\\routing\\PrivateRoute.js",
    "content": "import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\n\nconst PrivateRoute = ({\n  component: Component,\n  auth: { isAuthenticated, loading }\n}) => {\n  if (loading) return <Spinner />;\n  if (isAuthenticated) return <Component />;\n\n  return <Navigate to=\"/login\" />;\n};\n\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n"
  },
  {
    "name": "client\\src\\index.js",
    "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"
  },
  {
    "name": "client\\src\\reducers\\alert.js",
    "content": "import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\n\nconst initialState = [];\n\nfunction alertReducer(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_ALERT:\n      return [...state, payload];\n    case REMOVE_ALERT:\n      return state.filter((alert) => alert.id !== payload);\n    default:\n      return state;\n  }\n}\n\nexport default alertReducer;\n"
  },
  {
    "name": "client\\src\\reducers\\auth.js",
    "content": "import {\n  REGISTER_SUCCESS,\n  //REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  //LOGIN_FAIL,\n  LOGOUT,\n  ACCOUNT_DELETED\n} from '../actions/types';\n\nconst initialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  loading: true,\n  user: null\n};\n\nfunction authReducer(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case USER_LOADED:\n      return {\n        ...state,\n        isAuthenticated: true,\n        loading: false,\n        user: payload\n      };\n    case REGISTER_SUCCESS:\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        ...payload,\n        isAuthenticated: true,\n        loading: false\n      };\n    case ACCOUNT_DELETED:\n    case AUTH_ERROR:\n    case LOGOUT:\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        user: null\n      };\n    default:\n      return state;\n  }\n}\n\nexport default authReducer;\n"
  },
  {
    "name": "client\\src\\reducers\\index.js",
    "content": "import { combineReducers } from 'redux';\nimport alert from './alert';\nimport auth from './auth';\nimport profile from './profile';\nimport post from './post';\n\nexport default combineReducers({\n  alert,\n  auth,\n  profile,\n  post\n});\n"
  },
  {
    "name": "client\\src\\reducers\\post.js",
    "content": "import {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT\n} from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\n\nfunction postReducer(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: payload },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(\n            (comment) => comment._id !== payload\n          )\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n}\n\nexport default postReducer;\n"
  },
  {
    "name": "client\\src\\reducers\\profile.js",
    "content": "import {\n  GET_PROFILE,\n  PROFILE_ERROR,\n  CLEAR_PROFILE,\n  UPDATE_PROFILE,\n  GET_PROFILES,\n  GET_REPOS,\n  NO_REPOS\n} from '../actions/types';\n\nconst initialState = {\n  profile: null,\n  profiles: [],\n  repos: [],\n  loading: true,\n  error: {}\n};\n\nfunction profileReducer(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_PROFILE:\n    case UPDATE_PROFILE:\n      return {\n        ...state,\n        profile: payload,\n        loading: false\n      };\n    case GET_PROFILES:\n      return {\n        ...state,\n        profiles: payload,\n        loading: false\n      };\n    case PROFILE_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n        profile: null\n      };\n    case CLEAR_PROFILE:\n      return {\n        ...state,\n        profile: null,\n        repos: []\n      };\n    case GET_REPOS:\n      return {\n        ...state,\n        repos: payload,\n        loading: false\n      };\n    case NO_REPOS:\n      return {\n        ...state,\n        repos: []\n      };\n    default:\n      return state;\n  }\n}\n\nexport default profileReducer;\n"
  },
  {
    "name": "client\\src\\store.js",
    "content": "import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n/*\n  NOTE: set up a store subscription listener\n  to store the users token in localStorage\n */\n\n/*\n  initialize current state from redux store for subscription comparison\n  preventing undefined error\n */\nlet currentState = store.getState();\n\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState();\n  // if the token changes set the value in localStorage and axios headers\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    setAuthToken(token);\n  }\n});\n\nexport default store;\n"
  },
  {
    "name": "client\\src\\utils\\api.js",
    "content": "import axios from 'axios';\nimport store from '../store';\nimport { LOGOUT } from '../actions/types';\n\n// Create an instance of axios\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/*\n  NOTE: intercept any error responses from the api\n and check if the token is no longer valid.\n ie. Token has expired or user is no longer\n authenticated.\n logout the user if the token has expired\n*/\n\napi.interceptors.response.use(\n  (res) => res,\n  (err) => {\n    if (err.response.status === 401) {\n      store.dispatch({ type: LOGOUT });\n    }\n    return Promise.reject(err);\n  }\n);\n\nexport default api;\n"
  },
  {
    "name": "client\\src\\utils\\formatDate.js",
    "content": "function formatDate(date) {\n  return new Intl.DateTimeFormat().format(new Date(date));\n}\n\nexport default formatDate;\n"
  },
  {
    "name": "client\\src\\utils\\setAuthToken.js",
    "content": "import api from './api';\n\n// store our JWT in LS and set axios headers if we do have a token\n\nconst setAuthToken = (token) => {\n  if (token) {\n    api.defaults.headers.common['x-auth-token'] = token;\n    localStorage.setItem('token', token);\n  } else {\n    delete api.defaults.headers.common['x-auth-token'];\n    localStorage.removeItem('token');\n  }\n};\n\nexport default setAuthToken;\n"
  },
  {
    "name": "config\\db.js",
    "content": "const mongoose = require('mongoose');\nconst config = require('config');\nconst db = config.get('mongoURI');\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(db, {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n      useUnifiedTopology: true\n    });\n\n    console.log('MongoDB Connected...');\n  } catch (err) {\n    console.error(err.message);\n    // Exit process with failure\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;\n"
  },
  {
    "name": "jsconfig.json",
    "content": "{\n  \"compilerOptions\": {\n    \"checkJs\": false,\n    \"resolveJsonModule\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"es2015\"\n  },\n  \"exclude\": [\n    \"dist\",\n    \"node_modules\",\n    \"build\",\n    \".vscode\",\n    \".nuxt\",\n    \"coverage\",\n    \"jspm_packages\",\n    \"tmp\",\n    \"temp\",\n    \"bower_components\",\n    \".npm\",\n    \".yarn\"\n  ],\n  \"typeAcquisition\": {\n    \"enable\": true\n  }\n}"
  },
  {
    "name": "middleware\\auth.js",
    "content": "const jwt = require('jsonwebtoken');\nconst config = require('config');\n\nmodule.exports = function (req, res, next) {\n  // Get token from header\n  const token = req.header('x-auth-token');\n\n  // Check if not token\n  if (!token) {\n    return res.status(401).json({ msg: 'No token, authorization denied' });\n  }\n\n  // Verify token\n  try {\n    jwt.verify(token, config.get('jwtSecret'), (error, decoded) => {\n      if (error) {\n        return res.status(401).json({ msg: 'Token is not valid' });\n      } else {\n        req.user = decoded.user;\n        next();\n      }\n    });\n  } catch (err) {\n    console.error('something wrong with auth middleware');\n    res.status(500).json({ msg: 'Server Error' });\n  }\n};\n"
  },
  {
    "name": "middleware\\checkObjectId.js",
    "content": "const mongoose = require('mongoose');\n// middleware to check for a valid object id\nconst checkObjectId = (idToCheck) => (req, res, next) => {\n  if (!mongoose.Types.ObjectId.isValid(req.params[idToCheck]))\n    return res.status(400).json({ msg: 'Invalid ID' });\n  next();\n};\n\nmodule.exports = checkObjectId;\n"
  },
  {
    "name": "models\\Post.js",
    "content": "const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst PostSchema = new Schema({\n  user: {\n    type: Schema.Types.ObjectId\n  },\n  text: {\n    type: String,\n    required: true\n  },\n  name: {\n    type: String\n  },\n  avatar: {\n    type: String\n  },\n  likes: [\n    {\n      user: {\n        type: Schema.Types.ObjectId\n      }\n    }\n  ],\n  comments: [\n    {\n      user: {\n        type: Schema.Types.ObjectId\n      },\n      text: {\n        type: String,\n        required: true\n      },\n      name: {\n        type: String\n      },\n      avatar: {\n        type: String\n      },\n      date: {\n        type: Date,\n        default: Date.now\n      }\n    }\n  ],\n  date: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmodule.exports = mongoose.model('post', PostSchema);\n"
  },
  {
    "name": "models\\Profile.js",
    "content": "const mongoose = require('mongoose');\n\nconst ProfileSchema = new mongoose.Schema({\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'user'\n  },\n  company: {\n    type: String\n  },\n  website: {\n    type: String\n  },\n  location: {\n    type: String\n  },\n  status: {\n    type: String,\n    required: true\n  },\n  skills: {\n    type: [String],\n    required: true\n  },\n  bio: {\n    type: String\n  },\n  githubusername: {\n    type: String\n  },\n  experience: [\n    {\n      title: {\n        type: String,\n        required: true\n      },\n      company: {\n        type: String,\n        required: true\n      },\n      location: {\n        type: String\n      },\n      from: {\n        type: Date,\n        required: true\n      },\n      to: {\n        type: Date\n      },\n      current: {\n        type: Boolean,\n        default: false\n      },\n      description: {\n        type: String\n      }\n    }\n  ],\n  education: [\n    {\n      school: {\n        type: String,\n        required: true\n      },\n      degree: {\n        type: String,\n        required: true\n      },\n      fieldofstudy: {\n        type: String,\n        required: true\n      },\n      from: {\n        type: Date,\n        required: true\n      },\n      to: {\n        type: Date\n      },\n      current: {\n        type: Boolean,\n        default: false\n      },\n      description: {\n        type: String\n      }\n    }\n  ],\n  social: {\n    youtube: {\n      type: String\n    },\n    twitter: {\n      type: String\n    },\n    facebook: {\n      type: String\n    },\n    linkedin: {\n      type: String\n    },\n    instagram: {\n      type: String\n    }\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmodule.exports = mongoose.model('profile', ProfileSchema);\n"
  },
  {
    "name": "models\\User.js",
    "content": "const mongoose = require('mongoose');\n\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  avatar: {\n    type: String\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmodule.exports = mongoose.model('user', UserSchema);\n"
  },
  {
    "name": "package.json",
    "content": "{\n  \"name\": \"devconnector\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Social network for developers\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server\",\n    \"server\": \"nodemon server\",\n    \"client\": \"npm start --prefix client\",\n    \"dev\": \"concurrently \\\"npm run server\\\" \\\"npm run client\\\"\",\n    \"heroku-postbuild\": \"NPM_CONFIG_PRODUCTION=false npm install --prefix client && npm run build --prefix client\"\n  },\n  \"author\": \"Brad Traversy\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"axios\": \"^0.21.0\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"client\": \"file:client\",\n    \"config\": \"^3.3.3\",\n    \"express\": \"^4.17.1\",\n    \"express-validator\": \"^6.8.1\",\n    \"gravatar\": \"^1.8.1\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"mongoose\": \"^5.11.8\",\n    \"normalize-url\": \"^5.3.0\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"^5.3.0\",\n    \"nodemon\": \"^2.0.6\"\n  }\n}\n"
  },
  {
    "name": "README.md",
    "content": "# DevConnector 2.0\n\n> Social network for developers\n\nThis is a MERN stack application from the \"MERN Stack Front To Back\" course on [Udemy](https://www.udemy.com/mern-stack-front-to-back/?couponCode=TRAVERSYMEDIA). It is a small social network app that includes authentication, profiles and forum posts.\n\n# Updates since course published\n\nSuch is the nature of software; things change frequently, newer more robust paradigms emerge and packages are continuously evolving.\nHopefully the below will help you adjust your course code to manage the most notable changes.\n\nThe master branch of this repository contains all the changes and updates, so if you're following along with the lectures in the Udemy course and need reference code to compare against please checkout the [origionalcoursecode](https://github.com/bradtraversy/devconnector_2.0/tree/originalcoursecode) branch. Much of the code in this master branch is compatible with course code but be aware that if you adopt some of the changes here, it may require other changes too.\n\nAfter completing the course you may want to look through this branch and play about with the changes.\n\n## Changes to GitHub API authentication\n\nSince the course was published, GitHub has [deprecated authentication via URL query parameters](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api/#authenticating-using-query-parameters)\nYou can get an access token by following [these instructions](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line)\nFor this app we don't need to add any permissions so don't select any in the _scopes_.\n**DO NOT SHARE ANY TOKENS THAT HAVE PERMISSIONS**\nThis would leave your account or repositories vulnerable, depending on permissions set.\n\nIt would also be worth adding your `default.json` config file to `.gitignore`\nIf git has been previously tracking your `default.json` file then...\n\n```bash\ngit rm --cached config/default.json\n```\n\nThen add your token to the config file and confirm that the file is untracked with `git status` before pushing to GitHub.\nGitHub does have your back here though. If you accidentally push code to a repository that contains a valid access token, GitHub will revoke that token. Thanks GitHub 🙏\n\nYou'll also need to change the options object in `routes/api/profile.js` where we make the request to the GitHub API to...\n\n```javascript\nconst options = {\n  uri: encodeURI(\n    `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc`\n  ),\n  method: 'GET',\n  headers: {\n    'user-agent': 'node.js',\n    Authorization: `token ${config.get('githubToken')}`\n  }\n};\n```\n\n### npm package request deprecated\n\nAs of 11th February 2020 [request](https://www.npmjs.com/package/request) has been deprecated and is no longer maintained.\nWe already use [axios](https://www.npmjs.com/package/axios) in the client so we can easily change the above fetching of a users GitHub repositories to use axios.\n\nInstall axios in the root of the project\n\n```bash\nnpm i axios\n```\n\nWe can then remove the client installation of axios.\n\n```bash\ncd client\nnpm uninstall axios\n```\n\nClient use of the axios module will be resolved in the root, so we can still use it in client.\n\nChange the above GitHub API request to..\n\n```javascript\nconst uri = encodeURI(\n  `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc`\n);\nconst headers = {\n  'user-agent': 'node.js',\n  Authorization: `token ${config.get('githubToken')}`\n};\n\nconst gitHubResponse = await axios.get(uri, { headers });\n```\n\nYou can see the full change in [routes/api/profile.js](https://github.com/bradtraversy/devconnector_2.0/blob/4be414c6a54994c18397dba9c927ad67b878508b/routes/api/profile.js#L324)\n\n## uuid no longer has a default export\n\nThe npm package [uuid](https://www.npmjs.com/package/uuid) no longer has a default export, so in our [client/src/actions/alert.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/actions/alert.js) we need to change the import and use of this package.\n\nchange\n\n```javascript\nimport uuid from 'uuid';\n```\n\nto\n\n```javascript\nimport { v4 as uuidv4 } from 'uuid';\n```\n\nAnd where we use it from\n\n```javascript\nconst id = uuid();\n```\n\nto\n\n```javascript\nconst id = uuidv4();\n```\n\n## Addition of normalize-url package 🌎\n\nDepending on what a user enters as their website or social links, we may not get a valid clickable url.\nFor example a user may enter _**traversymedia.com**_ or _**www.traversymedia.com**_ which won't be a clickable valid url in the UI on the users profile page.\nTo solve this we brought in [normalize-url](https://www.npmjs.com/package/normalize-url) to well.. normalize the url.\n\nRegardless of what the user enters it will ammend the url accordingly to make it valid (assuming the site exists).\nYou can see the use here in [routes/api/profile.js](https://github.com/bradtraversy/devconnector_2.0/blob/31e5318592b886add58923c751dba73274c711de/routes/api/profile.js#L71)\n\n## Fix broken links in gravatar 🔗\n\nThere is an unresolved [issue](https://github.com/emerleite/node-gravatar/issues/47) with the [node-gravatar](https://github.com/emerleite/node-gravatar#readme) package, whereby the url is not valid. Fortunately we added normalize-url so we can use that to easily fix the issue. If you're not seeing Gravatar avatars showing in your app then most likely you need to implement this change.\nYou can see the code use here in [routes/api/users.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/routes/api/users.js#L44)\n\n## Redux subscription to manage local storage 📥\n\nThe rules of redux say that our [reducers should be pure](https://redux.js.org/basics/reducers#handling-actions) and do just one thing.\n\nIf you're not familiar with the concept of pure functions, they must do the following..\n\n1. Return the same output given the same input.\n2. Have no side effects.\n\nSo our reducers are not the best place to manage local storage of our auth token.\nIdeally our action creators should also just dispatch actions, nothing else. So using these for additional side effects like setting authentication headers is not the best solution here.\n\nRedux provides us with a [`store.subscribe`](https://redux.js.org/api/store#subscribelistener) listener that runs every time a state change occurs.\n\nWe can use this listener to **_watch_** our store and set our auth token in local storage and axios headers accordingly.\n\n- if there is a token - store it in local storage and set the headers.\n- if there is no token - token is null - remove it from storage and delete the headers.\n\nThe subscription can be seen in [client/src/store.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/store.js)\n\nWe also need to change our [client/src/utils/setAuthToken.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/utils/setAuthToken.js) so it now handles both the setting of the token in local storage and in axios headers.\n`setauthToken.js` in turn depends on [client/src/utils/api.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/utils/api.js) where we create an instance of axios. So you will also need to grab that file.\n\nWith those two changes in place we can remove all setting of local storage from [client/src/reducers/auth.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/reducers/auth.js). And remove setting of the token in axios headers from [client/src/actions/auth.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/actions/auth.js). This helps keep our code predictable, manageable and ultimately bug free.\n\n## Component reuse ♻️\n\nThe EditProfile and CreateProfile have been reduced to one component [ProfileForm.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/components/profile-forms/ProfileForm.js)  \nThe majority of this logic came from the refactrored EditProfile Component, which was initially changed to fix the issues with the use of useEffect we see in this component.\n\nIf you want to address the linter warnings in EditProfile then this is the component you are looking for.\n\n## Log user out on token expiration 🔐\n\nIf the Json Web Token expires then it should log the user out and end the authentication of their session.\n\nWe can do this using a [axios interceptor](https://github.com/axios/axios#interceptors) together paired with creating an instance of axios.  \nThe interceptor, well... intercepts any response and checks the response from our api for a `401` status in the response.  \nie. the token has now expired and is no longer valid, or no valid token was sent.  \nIf such a status exists then we log out the user and clear the profile from redux state.\n\n**You can see the implementation of the interceptor and axios instance in [utils/api.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/utils/api.js)**\n\nCreating an instance of axios also cleans up our action creators in [actions/auth.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/actions/auth.js), [actions/profile.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/actions/profile.js) and [actions/post.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/actions/post.js)\n\nNote that implementing this change also requires that you use the updated code in [utils/setAuthToken.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/utils/setAuthToken.js)\nWhich also in turn depends on [utils/api.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/utils/api.js)\nI would also recommending updating to use a [ redux subscription ](https://github.com/bradtraversy/devconnector_2.0#redux-subscription-to-manage-local-storage-) to mange setting of the auth token in headers and local storage.\n\n## Remove Moment 🗑️\n\nAs some of you may be aware, [Moment.js](https://www.npmjs.com/package/moment) which [ react-moment ](https://www.npmjs.com/package/react-moment) depends on has since become _legacy code_.\\\nThe maintainers of Moment.js now recommend finding an alternative to their package.\n\n> Moment.js is a legacy project, now in maintenance mode.\\\n>  In most cases, you should choose a different library.\\\n>  For more details and recommendations, please see Project Status in the docs.\\\n>  Thank you.\n\nSome of you in the course have been having problems installing both packages and meeting peer dependencies.\\\n We can instead use the browsers built in [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API.\\\n First create a [ utils/formatDate.js ](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/utils/formatDate.js) file, with the following code...\n\n```javascript\nfunction formatDate(date) {\n  return new Intl.DateTimeFormat().format(new Date(date));\n}\n\nexport default formatDate;\n```\n\nThen in our [Education.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/components/dashboard/Education.js) component, import the new function...\n\n```javascript\nimport formatDate from '../../utils/formatDate';\n```\n\nAnd use it instead of Moment...\n\n```jsx\n<td>\n  {formatDate(edu.from)} - {edu.to ? formatDate(edu.to) : 'Now'}\n</td>\n```\n\nSo wherever you use `<Moment />` you can change to use the `formatDate` function.\\\nFiles to change would be...\n\n- [Education.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/components/dashboard/Education.js)\n- [Experience.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/components/dashboard/Experience.js)\n- [CommentItem.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/components/post/CommentItem.js)\n- [PostItem.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/components/posts/PostItem.js)\n- [ProfileEducation.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/components/profile/ProfileEducation.js)\n- [ProfileExperience.js](https://github.com/bradtraversy/devconnector_2.0/blob/master/client/src/components/profile/ProfileExperience.js)\n\nIf you're updating your project you will now be able to uninstall **react-moment** and **moment** as project dependencies.\n\n## React Router V6 🧭\n\nSince the course was released [React Router](https://reactrouter.com) has been updated to version 6\nwhich includes some breaking changes.\nYou can see the official migration guide from version 5 [ here ](https://reactrouter.com/docs/en/v6/upgrading/v5).\n\n### To summarize the changes to the course code\n\nInstead of a `<Switch />` we now use a [ `<Routes />` ](https://reactrouter.com/docs/en/v6/api#routes-and-route) component.\n\nThe [ `<Route />` ](https://reactrouter.com/docs/en/v6/api#routes-and-route) component no longer receives a **_component_** prop, instead we\npass a **_element_** prop which should be a React element i.e. JSX. Routing is\nalso now relative to the component.\n\nFor redirection and Private routing we can no longer use `<Redirect />`, we now\nhave available a [ `<Navigate />` ](https://reactrouter.com/docs/en/v6/api#navigate) component.\n\nWe no longer have access to the **_match_** and **_history_** objects in our\ncomponent props. Instead of the match object for routing parameters we can use\nthe [**useParams**](https://reactrouter.com/docs/en/v6/api#useparams) hook, and in place of using the history object to _push_\nonto the router we can use the [**useNavigate**](https://reactrouter.com/docs/en/v6/api#usenavigate) hook.\n\nThe above changes do actually clean up the routing considerably with all\napplication routing in one place in [App.js](client/src/App.js).\nOur [PrivateRoute](client/src/components/routing/PrivateRoute.js) is a good deal\nsimpler now and no longer needs to use a render prop.\n\nWith moving all of the routing to App.js this did affect the styling as all\nroutes needed to be inside the original `<section className=\"container\">`.\nTo solve this each page component in App.js (any child of a `<Route />`) gets\nwrapped in it's own `<section className=\"container\">`, So we no longer need that\nin App.js. In most cases this just replaces the outer `<Fragment />` in the\ncomponent.\n\nThe styling also affected the [ `<Alert />`\n](client/src/components/layout/Alert.js) component as this will show in\naddition to other page components adding it's own `<section>` would mean extra\ncontent shift when the alerts show. To solve this the alerts have been given\ntheir [ own styling ](https://github.com/bradtraversy/devconnector_2.0/blob/c5b1fc48ccfecf30b6ed85f228a337f82d93e3f9/client/src/App.css#L579) so they are `position: fixed;` and we get no content shift,\nwhich additionally makes for a smoother UI with the alerts popping up in the top\nright of the screen.\n\n---\n\n# Quick Start 🚀\n\n### Add a default.json file in config folder with the following\n\n```json\n{\n  \"mongoURI\": \"<your_mongoDB_Atlas_uri_with_credentials>\",\n  \"jwtSecret\": \"secret\",\n  \"githubToken\": \"<yoursecrectaccesstoken>\"\n}\n```\n\n### Install server dependencies\n\n```bash\nnpm install\n```\n\n### Install client dependencies\n\n```bash\ncd client\nnpm install\n```\n\n### Run both Express & React from root\n\n```bash\nnpm run dev\n```\n\n### Build for production\n\n```bash\ncd client\nnpm run build\n```\n\n### Test production before deploy\n\nAfter running a build in the client 👆, cd into the root of the project.  \nAnd run...\n\nLinux/Unix\n\n```bash\nNODE_ENV=production node server.js\n```\n\nWindows Cmd Prompt or Powershell\n\n```bash\n$env:NODE_ENV=\"production\"\nnode server.js\n```\n\nCheck in browser on [http://localhost:5000/](http://localhost:5000/)\n\n### Deploy to Heroku\n\nIf you followed the sensible advice above and included `config/default.json` and `config/production.json` in your .gitignore file, then pushing to Heroku will omit your config files from the push.  \nHowever, Heroku needs these files for a successful build.  \nSo how to get them to Heroku without commiting them to GitHub?\n\nWhat I suggest you do is create a local only branch, lets call it _production_.\n\n```bash\ngit checkout -b production\n```\n\nWe can use this branch to deploy from, with our config files.\n\nAdd the config file...\n\n```bash\ngit add -f config/production.json\n```\n\nThis will track the file in git on this branch only. **DON'T PUSH THE PRODUCTION BRANCH TO GITHUB**\n\nCommit...\n\n```bash\ngit commit -m 'ready to deploy'\n```\n\nCreate your Heroku project\n\n```bash\nheroku create\n```\n\nAnd push the local production branch to the remote heroku main branch.\n\n```bash\ngit push heroku production:main\n```\n\nNow Heroku will have the config it needs to build the project.\n\n> **Don't forget to make sure your production database is not whitelisted in MongoDB Atlas, otherwise the database connection will fail and your app will crash.**\n\nAfter deployment you can delete the production branch if you like.\n\n```bash\ngit checkout main\ngit branch -D production\n```\n\nOr you can leave it to merge and push updates from another branch.  \nMake any changes you need on your main branch and merge those into your production branch.\n\n```bash\ngit checkout production\ngit merge main\n```\n\nOnce merged you can push to heroku as above and your site will rebuild and be updated.\n\n---\n\n## App Info\n\n### Author\n\nBrad Traversy\n[Traversy Media](http://www.traversymedia.com)\n\n### Version\n\n2.0.0\n\n### License\n\nThis project is licensed under the MIT License\n"
  },
  {
    "name": "routes\\api\\auth.js",
    "content": "const express = require('express');\nconst router = express.Router();\nconst bcrypt = require('bcryptjs');\nconst auth = require('../../middleware/auth');\nconst jwt = require('jsonwebtoken');\nconst config = require('config');\nconst { check, validationResult } = require('express-validator');\n\nconst User = require('../../models/User');\n\n// @route    GET api/auth\n// @desc     Get user by token\n// @access   Private\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    res.json(user);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    POST api/auth\n// @desc     Authenticate user & get token\n// @access   Public\nrouter.post(\n  '/',\n  check('email', 'Please include a valid email').isEmail(),\n  check('password', 'Password is required').exists(),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { email, password } = req.body;\n\n    try {\n      let user = await User.findOne({ email });\n\n      if (!user) {\n        return res\n          .status(400)\n          .json({ errors: [{ msg: 'Invalid Credentials' }] });\n      }\n\n      const isMatch = await bcrypt.compare(password, user.password);\n\n      if (!isMatch) {\n        return res\n          .status(400)\n          .json({ errors: [{ msg: 'Invalid Credentials' }] });\n      }\n\n      const payload = {\n        user: {\n          id: user.id\n        }\n      };\n\n      jwt.sign(\n        payload,\n        config.get('jwtSecret'),\n        { expiresIn: '5 days' },\n        (err, token) => {\n          if (err) throw err;\n          res.json({ token });\n        }\n      );\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server error');\n    }\n  }\n);\n\nmodule.exports = router;\n"
  },
  {
    "name": "routes\\api\\posts.js",
    "content": "const express = require('express');\nconst router = express.Router();\nconst { check, validationResult } = require('express-validator');\nconst auth = require('../../middleware/auth');\n\nconst Post = require('../../models/Post');\nconst User = require('../../models/User');\nconst checkObjectId = require('../../middleware/checkObjectId');\n\n// @route    POST api/posts\n// @desc     Create a post\n// @access   Private\nrouter.post(\n  '/',\n  auth,\n  check('text', 'Text is required').notEmpty(),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    try {\n      const user = await User.findById(req.user.id).select('-password');\n\n      const newPost = new Post({\n        text: req.body.text,\n        name: user.name,\n        avatar: user.avatar,\n        user: req.user.id\n      });\n\n      const post = await newPost.save();\n\n      res.json(post);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route    GET api/posts\n// @desc     Get all posts\n// @access   Private\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const posts = await Post.find().sort({ date: -1 });\n    res.json(posts);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    GET api/posts/:id\n// @desc     Get post by ID\n// @access   Private\nrouter.get('/:id', auth, checkObjectId('id'), async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    DELETE api/posts/:id\n// @desc     Delete a post\n// @access   Private\nrouter.delete('/:id', [auth, checkObjectId('id')], async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({ msg: 'Post not found' });\n    }\n\n    // Check user\n    if (post.user.toString() !== req.user.id) {\n      return res.status(401).json({ msg: 'User not authorized' });\n    }\n\n    await post.remove();\n\n    res.json({ msg: 'Post removed' });\n  } catch (err) {\n    console.error(err.message);\n\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    PUT api/posts/like/:id\n// @desc     Like a post\n// @access   Private\nrouter.put('/like/:id', auth, checkObjectId('id'), async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    // Check if the post has already been liked\n    if (post.likes.some((like) => like.user.toString() === req.user.id)) {\n      return res.status(400).json({ msg: 'Post already liked' });\n    }\n\n    post.likes.unshift({ user: req.user.id });\n\n    await post.save();\n\n    return res.json(post.likes);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    PUT api/posts/unlike/:id\n// @desc     Unlike a post\n// @access   Private\nrouter.put('/unlike/:id', auth, checkObjectId('id'), async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    // Check if the post has not yet been liked\n    if (!post.likes.some((like) => like.user.toString() === req.user.id)) {\n      return res.status(400).json({ msg: 'Post has not yet been liked' });\n    }\n\n    // remove the like\n    post.likes = post.likes.filter(\n      ({ user }) => user.toString() !== req.user.id\n    );\n\n    await post.save();\n\n    return res.json(post.likes);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    POST api/posts/comment/:id\n// @desc     Comment on a post\n// @access   Private\nrouter.post(\n  '/comment/:id',\n  auth,\n  checkObjectId('id'),\n  check('text', 'Text is required').notEmpty(),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    try {\n      const user = await User.findById(req.user.id).select('-password');\n      const post = await Post.findById(req.params.id);\n\n      const newComment = {\n        text: req.body.text,\n        name: user.name,\n        avatar: user.avatar,\n        user: req.user.id\n      };\n\n      post.comments.unshift(newComment);\n\n      await post.save();\n\n      res.json(post.comments);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route    DELETE api/posts/comment/:id/:comment_id\n// @desc     Delete comment\n// @access   Private\nrouter.delete('/comment/:id/:comment_id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    // Pull out comment\n    const comment = post.comments.find(\n      (comment) => comment.id === req.params.comment_id\n    );\n    // Make sure comment exists\n    if (!comment) {\n      return res.status(404).json({ msg: 'Comment does not exist' });\n    }\n    // Check user\n    if (comment.user.toString() !== req.user.id) {\n      return res.status(401).json({ msg: 'User not authorized' });\n    }\n\n    post.comments = post.comments.filter(\n      ({ id }) => id !== req.params.comment_id\n    );\n\n    await post.save();\n\n    return res.json(post.comments);\n  } catch (err) {\n    console.error(err.message);\n    return res.status(500).send('Server Error');\n  }\n});\n\nmodule.exports = router;\n"
  },
  {
    "name": "routes\\api\\profile.js",
    "content": "const express = require('express');\nconst axios = require('axios');\nconst config = require('config');\nconst router = express.Router();\nconst auth = require('../../middleware/auth');\nconst { check, validationResult } = require('express-validator');\n// bring in normalize to give us a proper url, regardless of what user entered\nconst normalize = require('normalize-url');\nconst checkObjectId = require('../../middleware/checkObjectId');\n\nconst Profile = require('../../models/Profile');\nconst User = require('../../models/User');\nconst Post = require('../../models/Post');\n\n// @route    GET api/profile/me\n// @desc     Get current users profile\n// @access   Private\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({ msg: 'There is no profile for this user' });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    POST api/profile\n// @desc     Create or update user profile\n// @access   Private\nrouter.post(\n  '/',\n  auth,\n  check('status', 'Status is required').notEmpty(),\n  check('skills', 'Skills is required').notEmpty(),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    // destructure the request\n    const {\n      website,\n      skills,\n      youtube,\n      twitter,\n      instagram,\n      linkedin,\n      facebook,\n      // spread the rest of the fields we don't need to check\n      ...rest\n    } = req.body;\n\n    // build a profile\n    const profileFields = {\n      user: req.user.id,\n      website:\n        website && website !== ''\n          ? normalize(website, { forceHttps: true })\n          : '',\n      skills: Array.isArray(skills)\n        ? skills\n        : skills.split(',').map((skill) => ' ' + skill.trim()),\n      ...rest\n    };\n\n    // Build socialFields object\n    const socialFields = { youtube, twitter, instagram, linkedin, facebook };\n\n    // normalize social fields to ensure valid url\n    for (const [key, value] of Object.entries(socialFields)) {\n      if (value && value.length > 0)\n        socialFields[key] = normalize(value, { forceHttps: true });\n    }\n    // add to profileFields\n    profileFields.social = socialFields;\n\n    try {\n      // Using upsert option (creates new doc if no match is found):\n      let profile = await Profile.findOneAndUpdate(\n        { user: req.user.id },\n        { $set: profileFields },\n        { new: true, upsert: true, setDefaultsOnInsert: true }\n      );\n      return res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      return res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route    GET api/profile\n// @desc     Get all profiles\n// @access   Public\nrouter.get('/', async (req, res) => {\n  try {\n    const profiles = await Profile.find().populate('user', ['name', 'avatar']);\n    res.json(profiles);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    GET api/profile/user/:user_id\n// @desc     Get profile by user ID\n// @access   Public\nrouter.get(\n  '/user/:user_id',\n  checkObjectId('user_id'),\n  async ({ params: { user_id } }, res) => {\n    try {\n      const profile = await Profile.findOne({\n        user: user_id\n      }).populate('user', ['name', 'avatar']);\n\n      if (!profile) return res.status(400).json({ msg: 'Profile not found' });\n\n      return res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      return res.status(500).json({ msg: 'Server error' });\n    }\n  }\n);\n\n// @route    DELETE api/profile\n// @desc     Delete profile, user & posts\n// @access   Private\nrouter.delete('/', auth, async (req, res) => {\n  try {\n    // Remove user posts\n    // Remove profile\n    // Remove user\n    await Promise.all([\n      Post.deleteMany({ user: req.user.id }),\n      Profile.findOneAndRemove({ user: req.user.id }),\n      User.findOneAndRemove({ _id: req.user.id })\n    ]);\n\n    res.json({ msg: 'User deleted' });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route    PUT api/profile/experience\n// @desc     Add profile experience\n// @access   Private\nrouter.put(\n  '/experience',\n  auth,\n  check('title', 'Title is required').notEmpty(),\n  check('company', 'Company is required').notEmpty(),\n  check('from', 'From date is required and needs to be from the past')\n    .notEmpty()\n    .custom((value, { req }) => (req.body.to ? value < req.body.to : true)),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    try {\n      const profile = await Profile.findOne({ user: req.user.id });\n\n      profile.experience.unshift(req.body);\n\n      await profile.save();\n\n      res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route    DELETE api/profile/experience/:exp_id\n// @desc     Delete experience from profile\n// @access   Private\n\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\n  try {\n    const foundProfile = await Profile.findOne({ user: req.user.id });\n\n    foundProfile.experience = foundProfile.experience.filter(\n      (exp) => exp._id.toString() !== req.params.exp_id\n    );\n\n    await foundProfile.save();\n    return res.status(200).json(foundProfile);\n  } catch (error) {\n    console.error(error);\n    return res.status(500).json({ msg: 'Server error' });\n  }\n});\n\n// @route    PUT api/profile/education\n// @desc     Add profile education\n// @access   Private\nrouter.put(\n  '/education',\n  auth,\n  check('school', 'School is required').notEmpty(),\n  check('degree', 'Degree is required').notEmpty(),\n  check('fieldofstudy', 'Field of study is required').notEmpty(),\n  check('from', 'From date is required and needs to be from the past')\n    .notEmpty()\n    .custom((value, { req }) => (req.body.to ? value < req.body.to : true)),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    try {\n      const profile = await Profile.findOne({ user: req.user.id });\n\n      profile.education.unshift(req.body);\n\n      await profile.save();\n\n      res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route    DELETE api/profile/education/:edu_id\n// @desc     Delete education from profile\n// @access   Private\n\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\n  try {\n    const foundProfile = await Profile.findOne({ user: req.user.id });\n    foundProfile.education = foundProfile.education.filter(\n      (edu) => edu._id.toString() !== req.params.edu_id\n    );\n    await foundProfile.save();\n    return res.status(200).json(foundProfile);\n  } catch (error) {\n    console.error(error);\n    return res.status(500).json({ msg: 'Server error' });\n  }\n});\n\n// @route    GET api/profile/github/:username\n// @desc     Get user repos from Github\n// @access   Public\nrouter.get('/github/:username', async (req, res) => {\n  try {\n    const uri = encodeURI(\n      `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc`\n    );\n    const headers = {\n      'user-agent': 'node.js',\n      Authorization: `token ${config.get('githubToken')}`\n    };\n\n    const gitHubResponse = await axios.get(uri, { headers });\n    return res.json(gitHubResponse.data);\n  } catch (err) {\n    console.error(err.message);\n    return res.status(404).json({ msg: 'No Github profile found' });\n  }\n});\n\nmodule.exports = router;\n"
  },
  {
    "name": "routes\\api\\users.js",
    "content": "const express = require('express');\nconst router = express.Router();\nconst gravatar = require('gravatar');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst config = require('config');\nconst { check, validationResult } = require('express-validator');\nconst normalize = require('normalize-url');\n\nconst User = require('../../models/User');\n\n// @route    POST api/users\n// @desc     Register user\n// @access   Public\nrouter.post(\n  '/',\n  check('name', 'Name is required').notEmpty(),\n  check('email', 'Please include a valid email').isEmail(),\n  check(\n    'password',\n    'Please enter a password with 6 or more characters'\n  ).isLength({ min: 6 }),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { name, email, password } = req.body;\n\n    try {\n      let user = await User.findOne({ email });\n\n      if (user) {\n        return res\n          .status(400)\n          .json({ errors: [{ msg: 'User already exists' }] });\n      }\n\n      const avatar = normalize(\n        gravatar.url(email, {\n          s: '200',\n          r: 'pg',\n          d: 'mm'\n        }),\n        { forceHttps: true }\n      );\n\n      user = new User({\n        name,\n        email,\n        avatar,\n        password\n      });\n\n      const salt = await bcrypt.genSalt(10);\n\n      user.password = await bcrypt.hash(password, salt);\n\n      await user.save();\n\n      const payload = {\n        user: {\n          id: user.id\n        }\n      };\n\n      jwt.sign(\n        payload,\n        config.get('jwtSecret'),\n        { expiresIn: '5 days' },\n        (err, token) => {\n          if (err) throw err;\n          res.json({ token });\n        }\n      );\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server error');\n    }\n  }\n);\n\nmodule.exports = router;\n"
  },
  {
    "name": "server.js",
    "content": "const express = require('express');\nconst connectDB = require('./config/db');\nconst path = require('path');\n\nconst app = express();\n\n// Connect Database\nconnectDB();\n\n// Init Middleware\napp.use(express.json());\n\n// Define Routes\napp.use('/api/users', require('./routes/api/users'));\napp.use('/api/auth', require('./routes/api/auth'));\napp.use('/api/profile', require('./routes/api/profile'));\napp.use('/api/posts', require('./routes/api/posts'));\n\n// Serve static assets in production\nif (process.env.NODE_ENV === 'production') {\n  // Set static folder\n  app.use(express.static('client/build'));\n\n  app.get('*', (req, res) => {\n    res.sendFile(path.resolve(__dirname, 'client', 'build', 'index.html'));\n  });\n}\n\nconst PORT = process.env.PORT || 5000;\n\napp.listen(PORT, () => console.log(`Server started on port ${PORT}`));\n"
  },
  {
    "name": "_resources\\html_css_theme\\add-education.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"posts.html\">Posts</a></li>\r\n        <li>\r\n          |\r\n          <a href=\"dashboard.html\" title=\"Dashboard\"\r\n            ><i class=\"fas fa-user\"></i>\r\n            <span class=\"hide-sm\">Dashboard</span></a\r\n          >\r\n        </li>\r\n        <li>\r\n          <a href=\"login.html\" title=\"Logout\">\r\n            <i class=\"fas fa-sign-out-alt\"></i>\r\n            <span class=\"hide-sm\">Logout</span></a\r\n          >\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <h1 class=\"large text-primary\">\r\n        Add Your Education\r\n      </h1>\r\n      <p class=\"lead\">\r\n        <i class=\"fas fa-graduation-cap\"></i> Add any school, bootcamp, etc that\r\n        you have attended\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form class=\"form\">\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"* School or Bootcamp\"\r\n            name=\"school\"\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"* Degree or Certificate\"\r\n            name=\"degree\"\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Field Of Study\" name=\"fieldofstudy\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>From Date</h4>\r\n          <input type=\"date\" name=\"from\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <p>\r\n            <input type=\"checkbox\" name=\"current\" value=\"\" /> Current School or Bootcamp\r\n          </p>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>To Date</h4>\r\n          <input type=\"date\" name=\"to\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <textarea\r\n            name=\"description\"\r\n            cols=\"30\"\r\n            rows=\"5\"\r\n            placeholder=\"Program Description\"\r\n          ></textarea>\r\n        </div>\r\n        <input type=\"submit\" class=\"btn btn-primary my-1\" />\r\n        <a class=\"btn btn-light my-1\" href=\"dashboard.html\">Go Back</a>\r\n      </form>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\add-experience.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"posts.html\">Posts</a></li>\r\n        <li>\r\n          |\r\n          <a href=\"dashboard.html\" title=\"Dashboard\"\r\n            ><i class=\"fas fa-user\"></i>\r\n            <span class=\"hide-sm\">Dashboard</span></a\r\n          >\r\n        </li>\r\n        <li>\r\n          <a href=\"login.html\" title=\"Logout\">\r\n            <i class=\"fas fa-sign-out-alt\"></i>\r\n            <span class=\"hide-sm\">Logout</span></a\r\n          >\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <h1 class=\"large text-primary\">\r\n       Add An Experience\r\n      </h1>\r\n      <p class=\"lead\">\r\n        <i class=\"fas fa-code-branch\"></i> Add any developer/programming\r\n        positions that you have had in the past\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form class=\"form\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"* Job Title\" name=\"title\" required />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"* Company\" name=\"company\" required />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Location\" name=\"location\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>From Date</h4>\r\n          <input type=\"date\" name=\"from\" />\r\n        </div>\r\n         <div class=\"form-group\">\r\n          <p><input type=\"checkbox\" name=\"current\" value=\"\" /> Current Job</p>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <h4>To Date</h4>\r\n          <input type=\"date\" name=\"to\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <textarea\r\n            name=\"description\"\r\n            cols=\"30\"\r\n            rows=\"5\"\r\n            placeholder=\"Job Description\"\r\n          ></textarea>\r\n        </div>\r\n        <input type=\"submit\" class=\"btn btn-primary my-1\" />\r\n        <a class=\"btn btn-light my-1\" href=\"dashboard.html\">Go Back</a>\r\n      </form>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\create-profile.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"posts.html\">Posts</a></li>\r\n        <li>\r\n          |\r\n          <a href=\"dashboard.html\" title=\"Dashboard\"\r\n            ><i class=\"fas fa-user\"></i>\r\n            <span class=\"hide-sm\">Dashboard</span></a\r\n          >\r\n        </li>\r\n        <li>\r\n          <a href=\"login.html\" title=\"Logout\">\r\n            <i class=\"fas fa-sign-out-alt\"></i>\r\n            <span class=\"hide-sm\">Logout</span></a\r\n          >\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <h1 class=\"large text-primary\">\r\n        Create Your Profile\r\n      </h1>\r\n      <p class=\"lead\">\r\n        <i class=\"fas fa-user\"></i> Let's get some information to make your\r\n        profile stand out\r\n      </p>\r\n      <small>* = required field</small>\r\n      <form class=\"form\">\r\n        <div class=\"form-group\">\r\n          <select name=\"status\">\r\n            <option value=\"0\">* Select Professional Status</option>\r\n            <option value=\"Developer\">Developer</option>\r\n            <option value=\"Junior Developer\">Junior Developer</option>\r\n            <option value=\"Senior Developer\">Senior Developer</option>\r\n            <option value=\"Manager\">Manager</option>\r\n            <option value=\"Student or Learning\">Student or Learning</option>\r\n            <option value=\"Instructor\">Instructor or Teacher</option>\r\n            <option value=\"Intern\">Intern</option>\r\n            <option value=\"Other\">Other</option>\r\n          </select>\r\n          <small class=\"form-text\"\r\n            >Give us an idea of where you are at in your career</small\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Company\" name=\"company\" />\r\n          <small class=\"form-text\"\r\n            >Could be your own company or one you work for</small\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Website\" name=\"website\" />\r\n          <small class=\"form-text\"\r\n            >Could be your own or a company website</small\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Location\" name=\"location\" />\r\n          <small class=\"form-text\"\r\n            >City & state suggested (eg. Boston, MA)</small\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"* Skills\" name=\"skills\" />\r\n          <small class=\"form-text\"\r\n            >Please use comma separated values (eg.\r\n            HTML,CSS,JavaScript,PHP)</small\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Github Username\"\r\n            name=\"githubusername\"\r\n          />\r\n          <small class=\"form-text\"\r\n            >If you want your latest repos and a Github link, include your\r\n            username</small\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <textarea placeholder=\"A short bio of yourself\" name=\"bio\"></textarea>\r\n          <small class=\"form-text\">Tell us a little about yourself</small>\r\n        </div>\r\n\r\n        <div class=\"my-2\">\r\n          <button type=\"button\" class=\"btn btn-light\">\r\n            Add Social Network Links\r\n          </button>\r\n          <span>Optional</span>\r\n        </div>\r\n\r\n        <div class=\"form-group social-input\">\r\n          <i class=\"fab fa-twitter fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Twitter URL\" name=\"twitter\" />\r\n        </div>\r\n\r\n        <div class=\"form-group social-input\">\r\n          <i class=\"fab fa-facebook fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Facebook URL\" name=\"facebook\" />\r\n        </div>\r\n\r\n        <div class=\"form-group social-input\">\r\n          <i class=\"fab fa-youtube fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"YouTube URL\" name=\"youtube\" />\r\n        </div>\r\n\r\n        <div class=\"form-group social-input\">\r\n          <i class=\"fab fa-linkedin fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Linkedin URL\" name=\"linkedin\" />\r\n        </div>\r\n\r\n        <div class=\"form-group social-input\">\r\n          <i class=\"fab fa-instagram fa-2x\"></i>\r\n          <input type=\"text\" placeholder=\"Instagram URL\" name=\"instagram\" />\r\n        </div>\r\n        <input type=\"submit\" class=\"btn btn-primary my-1\" />\r\n        <a class=\"btn btn-light my-1\" href=\"dashboard.html\">Go Back</a>\r\n      </form>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\css\\style.css",
    "content": "/* Global Styles */\r\n:root {\r\n  --primary-color: #17a2b8;\r\n  --dark-color: #343a40;\r\n  --light-color: #f4f4f4;\r\n  --danger-color: #dc3545;\r\n  --success-color: #28a745;\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody {\r\n  font-family: 'Raleway', sans-serif;\r\n  font-size: 1rem;\r\n  line-height: 1.6;\r\n  background-color: #fff;\r\n  color: #333;\r\n}\r\n\r\na {\r\n  color: var(--primary-color);\r\n  text-decoration: none;\r\n}\r\n\r\nul {\r\n  list-style: none;\r\n}\r\n\r\nimg {\r\n  width: 100%;\r\n}\r\n\r\n/* Utilities */\r\n.container {\r\n  max-width: 1100px;\r\n  margin: auto;\r\n  overflow: hidden;\r\n  padding: 0 2rem;\r\n  margin-top: 6rem;\r\n  margin-bottom: 3rem;\r\n}\r\n\r\n/* Text Styles*/\r\n.x-large {\r\n  font-size: 4rem;\r\n  line-height: 1.2;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.large {\r\n  font-size: 3rem;\r\n  line-height: 1.2;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.lead {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.text-center {\r\n  text-align: center;\r\n}\r\n\r\n.text-primary {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.text-dark {\r\n  color: var(--dark-color);\r\n}\r\n\r\n/* Padding */\r\n.p {\r\n  padding: 0.5rem;\r\n}\r\n.p-1 {\r\n  padding: 1rem;\r\n}\r\n.p-2 {\r\n  padding: 2rem;\r\n}\r\n.p-3 {\r\n  padding: 3rem;\r\n}\r\n.py {\r\n  padding: 0.5rem 0;\r\n}\r\n.py-1 {\r\n  padding: 1rem 0;\r\n}\r\n.py-2 {\r\n  padding: 2rem 0;\r\n}\r\n.py-3 {\r\n  padding: 3rem 0;\r\n}\r\n\r\n/* Margin */\r\n.m {\r\n  margin: 0.5rem;\r\n}\r\n.m-1 {\r\n  margin: 1rem;\r\n}\r\n.m-2 {\r\n  margin: 2rem;\r\n}\r\n.m-3 {\r\n  margin: 3rem;\r\n}\r\n.my {\r\n  margin: 0.5rem 0;\r\n}\r\n.my-1 {\r\n  margin: 1rem 0;\r\n}\r\n.my-2 {\r\n  margin: 2rem 0;\r\n}\r\n.my-3 {\r\n  margin: 3rem 0;\r\n}\r\n\r\n.btn {\r\n  display: inline-block;\r\n  background: var(--light-color);\r\n  color: #333;\r\n  padding: 0.4rem 1.3rem;\r\n  font-size: 1rem;\r\n  border: none;\r\n  cursor: pointer;\r\n  margin-right: 0.5rem;\r\n  transition: opacity 0.2s ease-in;\r\n  outline: none;\r\n}\r\n\r\n.badge {\r\n  font-size: 0.8rem;\r\n  padding: 0.1rem;\r\n  text-align: center;\r\n  margin: 0.3rem;\r\n  background: var(--light-color);\r\n  color: #333;\r\n}\r\n\r\n.alert {\r\n  padding: 0.8rem;\r\n  margin: 1rem 0;\r\n  opacity: 0.9;\r\n  background: var(--light-color);\r\n  color: #333;\r\n}\r\n\r\n.btn-primary,\r\n.bg-primary,\r\n.badge-primary,\r\n.alert-primary {\r\n  background: var(--primary-color);\r\n  color: #fff;\r\n}\r\n\r\n.btn-light,\r\n.bg-light,\r\n.badge-light,\r\n.alert-light {\r\n  background: var(--light-color);\r\n  color: #333;\r\n}\r\n\r\n.btn-dark,\r\n.bg-dark,\r\n.badge-dark,\r\n.alert-dark {\r\n  background: var(--dark-color);\r\n  color: #fff;\r\n}\r\n\r\n.btn-danger,\r\n.bg-danger,\r\n.badge-danger,\r\n.alert-danger {\r\n  background: var(--danger-color);\r\n  color: #fff;\r\n}\r\n\r\n.btn-success,\r\n.bg-success,\r\n.badge-success,\r\n.alert-success {\r\n  background: var(--success-color);\r\n  color: #fff;\r\n}\r\n\r\n.btn-white,\r\n.bg-white,\r\n.badge-white,\r\n.alert-white {\r\n  background: #fff;\r\n  color: #333;\r\n  border: #ccc solid 1px;\r\n}\r\n\r\n.btn:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n.bg-light,\r\n.badge-light {\r\n  border: #ccc solid 1px;\r\n}\r\n\r\n.round-img {\r\n  border-radius: 50%;\r\n}\r\n\r\n.line {\r\n  height: 1px;\r\n  background: #ccc;\r\n  margin: 1.5rem 0;\r\n}\r\n\r\n/* Overlay */\r\n.dark-overlay {\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* Forms */\r\n.form .form-group {\r\n  margin: 1.2rem 0;\r\n}\r\n\r\n.form .form-text {\r\n  display: block;\r\n  margin-top: 0.3rem;\r\n  color: #888;\r\n}\r\n\r\n.form input[type='text'],\r\n.form input[type='email'],\r\n.form input[type='password'],\r\n.form input[type='date'],\r\n.form select,\r\n.form textarea {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0.4rem;\r\n  font-size: 1.2rem;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.form input[type='submit'],\r\nbutton {\r\n  font: inherit;\r\n}\r\n\r\n.form .social-input {\r\n  display: flex;\r\n}\r\n\r\n.form .social-input i {\r\n  padding: 0.5rem;\r\n  width: 4rem;\r\n}\r\n\r\n.form .social-input i.fa-twitter {\r\n  color: #38a1f3;\r\n}\r\n.form .social-input i.fa-facebook {\r\n  color: #3b5998;\r\n}\r\n.form .social-input i.fa-instagram {\r\n  color: #3f729b;\r\n}\r\n.form .social-input i.fa-youtube {\r\n  color: #c4302b;\r\n}\r\n.form .social-input i.fa-linkedin {\r\n  color: #0077b5;\r\n}\r\n\r\n.table th,\r\n.table td {\r\n  padding: 1rem;\r\n  text-align: left;\r\n}\r\n\r\n.table th {\r\n  background: var(--light-color);\r\n}\r\n\r\n/* Navbar */\r\n.navbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.7rem 2rem;\r\n  position: fixed;\r\n  z-index: 1;\r\n  width: 100%;\r\n  top: 0;\r\n  border-bottom: solid 1px var(--primary-color);\r\n  opacity: 0.9;\r\n}\r\n\r\n.navbar ul {\r\n  display: flex;\r\n}\r\n\r\n.navbar a {\r\n  color: #fff;\r\n  padding: 0.45rem;\r\n  margin: 0 0.25rem;\r\n}\r\n\r\n.navbar a:hover {\r\n  color: var(--primary-color);\r\n}\r\n\r\n.navbar .welcome span {\r\n  margin-right: 0.6rem;\r\n}\r\n\r\n/* Landing Page */\r\n.landing {\r\n  position: relative;\r\n  background: url('../img/showcase.jpg') no-repeat center center/cover;\r\n  height: 100vh;\r\n}\r\n\r\n.landing-inner {\r\n  color: #fff;\r\n  height: 100%;\r\n  width: 80%;\r\n  margin: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n}\r\n\r\n/* Profiles Page */\r\n.profile {\r\n  display: grid;\r\n  grid-template-columns: 2fr 4fr 2fr;\r\n  align-items: center;\r\n  grid-gap: 2rem;\r\n  padding: 1rem;\r\n  line-height: 1.8;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n/* Profile Page */\r\n.profile-grid {\r\n  display: grid;\r\n  grid-template-areas:\r\n    'top top'\r\n    'about about'\r\n    'exp edu'\r\n    'github github';\r\n  grid-gap: 1rem;\r\n}\r\n\r\n.profile-top {\r\n  grid-area: top;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n}\r\n\r\n.profile-top img {\r\n  width: 250px;\r\n}\r\n\r\n.profile-top .icons a {\r\n  color: #fff;\r\n  margin: 0 0.3rem;\r\n}\r\n\r\n.profile-top .icons a:hover {\r\n  color: var(--dark-color);\r\n}\r\n\r\n.profile-about {\r\n  grid-area: about;\r\n  text-align: center;\r\n}\r\n\r\n.profile-about .skills {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n}\r\n\r\n.profile-exp {\r\n  grid-area: exp;\r\n}\r\n\r\n.profile-edu {\r\n  grid-area: edu;\r\n}\r\n\r\n.profile-exp h2,\r\n.profile-edu h2 {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.profile-exp > div,\r\n.profile-edu > div {\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: #ccc 1px dotted;\r\n}\r\n\r\n.profile-exp > div:last-child,\r\n.profile-edu > div:last-child {\r\n  border: 0;\r\n}\r\n\r\n.profile-exp p,\r\n.profile-edu p {\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.profile-github {\r\n  grid-area: github;\r\n}\r\n\r\n.profile-github .repo {\r\n  display: flex;\r\n}\r\n\r\n.profile-github .repo > div:first-child {\r\n  flex: 7;\r\n  flex-basis: 70%;\r\n}\r\n\r\n.profile-github > div:last-child {\r\n  flex: 3;\r\n  flex-basis: 20%;\r\n}\r\n\r\n/* Posts Page */\r\n.post-form .post-form-header {\r\n  background: var(--primary-color);\r\n  padding: 0.5rem;\r\n}\r\n\r\n.post {\r\n  display: grid;\r\n  grid-template-columns: 1fr 4fr;\r\n  grid-gap: 2rem;\r\n  align-items: center;\r\n}\r\n\r\n.post > div:first-child {\r\n  text-align: center;\r\n}\r\n\r\n.post img {\r\n  width: 100px;\r\n}\r\n\r\n.post .comment-count {\r\n  background: var(--light-color);\r\n  color: var(--primary-color);\r\n  padding: 0.1rem 0.2rem;\r\n  border-radius: 5px;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.post .post-date {\r\n  color: #aaa;\r\n  font-size: 0.8rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n/* Mobile Styles */\r\n@media (max-width: 700px) {\r\n  .container {\r\n    margin-top: 8rem;\r\n  }\r\n\r\n  .hide-sm {\r\n    display: none;\r\n  }\r\n\r\n  /* Text Styles */\r\n  .x-large {\r\n    font-size: 3rem;\r\n  }\r\n\r\n  .large {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .lead {\r\n    font-size: 1rem;\r\n  }\r\n\r\n  /* Navbar */\r\n  .navbar {\r\n    display: block;\r\n    text-align: center;\r\n  }\r\n\r\n  .navbar ul {\r\n    text-align: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .navbar h1 {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .navbar .welcome {\r\n    display: none;\r\n  }\r\n\r\n  /* Profiles Page */\r\n  .profile {\r\n    grid-template-columns: 1fr;\r\n    text-align: center;\r\n  }\r\n\r\n  .profile ul {\r\n    display: none;\r\n  }\r\n\r\n  /* Profile Page */\r\n\r\n  .profile-top img,\r\n  .profile img {\r\n    width: 200px;\r\n    margin: auto;\r\n  }\r\n\r\n  .profile-grid {\r\n    grid-template-areas:\r\n      'top'\r\n      'about'\r\n      'exp'\r\n      'edu'\r\n      'github';\r\n  }\r\n\r\n  .profile-about .skills {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .dash-buttons a {\r\n    display: block;\r\n    width: 100%;\r\n    margin-bottom: 0.2rem;\r\n  }\r\n\r\n  .post {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  .post a,\r\n  .post button {\r\n    padding: 0.3rem 0.4rem;\r\n  }\r\n}\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\dashboard.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"posts.html\">Posts</a></li>\r\n        <li>\r\n          |\r\n          <a href=\"dashboard.html\" title=\"Dashboard\"\r\n            ><i class=\"fas fa-user\"></i>\r\n            <span class=\"hide-sm\">Dashboard</span></a\r\n          >\r\n        </li>\r\n        <li>\r\n          <a href=\"login.html\" title=\"Logout\">\r\n            <i class=\"fas fa-sign-out-alt\"></i>\r\n            <span class=\"hide-sm\">Logout</span></a\r\n          >\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <h1 class=\"large text-primary\">\r\n        Dashboard\r\n      </h1>\r\n      <p class=\"lead\"><i class=\"fas fa-user\"></i> Welcome John Doe</p>\r\n      <div class=\"dash-buttons\">\r\n        <a href=\"create-profile.html\" class=\"btn btn-light\"\r\n          ><i class=\"fas fa-user-circle text-primary\"></i> Edit Profile</a\r\n        >\r\n        <a href=\"add-experience.html\" class=\"btn btn-light\"\r\n          ><i class=\"fab fa-black-tie text-primary\"></i> Add Experience</a\r\n        >\r\n        <a href=\"add-education.html\" class=\"btn btn-light\"\r\n          ><i class=\"fas fa-graduation-cap text-primary\"></i> Add Education</a\r\n        >\r\n      </div>\r\n\r\n      <h2 class=\"my-2\">Experience Credentials</h2>\r\n      <table class=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Company</th>\r\n            <th class=\"hide-sm\">Title</th>\r\n            <th class=\"hide-sm\">Years</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Tech Guy Web Solutions</td>\r\n            <td class=\"hide-sm\">Senior Developer</td>\r\n            <td class=\"hide-sm\">\r\n              02-03-2009 - 01-02-2014\r\n            </td>\r\n            <td>\r\n              <button class=\"btn btn-danger\">\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Traversy Media</td>\r\n            <td class=\"hide-sm\">Instructor & Developer</td>\r\n            <td class=\"hide-sm\">\r\n              02-03-2015 - Now\r\n            </td>\r\n            <td>\r\n              <button class=\"btn btn-danger\">\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <h2 class=\"my-2\">Education Credentials</h2>\r\n      <table class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>School</th>\r\n              <th class=\"hide-sm\">Degree</th>\r\n              <th class=\"hide-sm\">Years</th>\r\n              <th />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Northern Essex</td>\r\n              <td class=\"hide-sm\">Associates</td>\r\n              <td class=\"hide-sm\">\r\n                02-03-2007 - 01-02-2009\r\n              </td>\r\n              <td>\r\n                <button class=\"btn btn-danger\">\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <div class=\"my-2\">\r\n            <button class=\"btn btn-danger\">\r\n                <i class=\"fas fa-user-minus\"></i>\r\n\r\n                Delete My Account\r\n            </button>\r\n          </div>\r\n    </section>\r\n\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\index.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"register.html\">Register</a></li>\r\n        <li><a href=\"login.html\">Login</a></li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"landing\">\r\n      <div class=\"dark-overlay\">\r\n        <div class=\"landing-inner\">\r\n          <h1 class=\"x-large\">Developer Connector</h1>\r\n          <p class=\"lead\">\r\n            Create a developer profile/portfolio, share posts and get help from\r\n            other developers\r\n          </p>\r\n          <div class=\"buttons\">\r\n            <a href=\"register.html\" class=\"btn btn-primary\">Sign Up</a>\r\n            <a href=\"login.html\" class=\"btn btn-light\">Login</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\login.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"register.html\">Register</a></li>\r\n        <li><a href=\"login.html\">Login</a></li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <div class=\"alert alert-danger\">\r\n        Invalid credentials\r\n      </div>\r\n      <h1 class=\"large text-primary\">Sign In</h1>\r\n      <p class=\"lead\"><i class=\"fas fa-user\"></i> Sign into Your Account</p>\r\n      <form class=\"form\" action=\"dashboard.html\">\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email Address\"\r\n            name=\"email\"\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            name=\"password\"\r\n          />\r\n        </div>\r\n        <input type=\"submit\" class=\"btn btn-primary\" value=\"Login\" />\r\n      </form>\r\n      <p class=\"my-1\">\r\n        Don't have an account? <a href=\"register.html\">Sign Up</a>\r\n      </p>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\post.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"posts.html\">Posts</a></li>\r\n        <li>\r\n          |\r\n          <a href=\"dashboard.html\" title=\"Dashboard\"\r\n            ><i class=\"fas fa-user\"></i>\r\n            <span class=\"hide-sm\">Dashboard</span></a\r\n          >\r\n        </li>\r\n        <li>\r\n          <a href=\"login.html\" title=\"Logout\">\r\n            <i class=\"fas fa-sign-out-alt\"></i>\r\n            <span class=\"hide-sm\">Logout</span></a\r\n          >\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <a href=\"posts.html\" class=\"btn\">Back To Posts</a>\r\n      <div class=\"post bg-white p-1 my-1\">\r\n        <div>\r\n          <a href=\"profile.html\">\r\n            <img\r\n              class=\"round-img\"\r\n              src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\r\n              alt=\"\"\r\n            />\r\n            <h4>John Doe</h4>\r\n          </a>\r\n        </div>\r\n        <div>\r\n          <p class=\"my-1\">\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint\r\n            possimus corporis sunt necessitatibus! Minus nesciunt soluta\r\n            suscipit nobis. Amet accusamus distinctio cupiditate blanditiis\r\n            dolor? Illo perferendis eveniet cum cupiditate aliquam?\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"post-form\">\r\n        <div class=\"bg-primary p\">\r\n          <h3>Leave A Comment</h3>\r\n        </div>\r\n        <form class=\"form my-1\">\r\n          <textarea\r\n            name=\"text\"\r\n            cols=\"30\"\r\n            rows=\"5\"\r\n            placeholder=\"Comment on this post\"\r\n            required\r\n          ></textarea>\r\n          <input type=\"submit\" class=\"btn btn-dark my-1\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n\r\n      <div class=\"comments\">\r\n        <div class=\"post bg-white p-1 my-1\">\r\n          <div>\r\n            <a href=\"profile.html\">\r\n              <img\r\n                class=\"round-img\"\r\n                src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\r\n                alt=\"\"\r\n              />\r\n              <h4>John Doe</h4>\r\n            </a>\r\n          </div>\r\n          <div>\r\n            <p class=\"my-1\">\r\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint\r\n              possimus corporis sunt necessitatibus! Minus nesciunt soluta\r\n              suscipit nobis. Amet accusamus distinctio cupiditate blanditiis\r\n              dolor? Illo perferendis eveniet cum cupiditate aliquam?\r\n            </p>\r\n             <p class=\"post-date\">\r\n                Posted on 04/16/2019\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"post bg-white p-1 my-1\">\r\n          <div>\r\n            <a href=\"profile.html\">\r\n              <img\r\n                class=\"round-img\"\r\n                src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\r\n                alt=\"\"\r\n              />\r\n              <h4>John Doe</h4>\r\n            </a>\r\n          </div>\r\n          <div>\r\n            <p class=\"my-1\">\r\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint\r\n              possimus corporis sunt necessitatibus! Minus nesciunt soluta\r\n              suscipit nobis. Amet accusamus distinctio cupiditate blanditiis\r\n              dolor? Illo perferendis eveniet cum cupiditate aliquam?\r\n            </p>\r\n             <p class=\"post-date\">\r\n                Posted on 04/16/2019\r\n            </p>\r\n             <button      \r\n            type=\"button\"\r\n            class=\"btn btn-danger\"\r\n          >\r\n            <i class=\"fas fa-times\"></i>\r\n          </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\posts.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"posts.html\">Posts</a></li>\r\n        <li>\r\n          |\r\n          <a href=\"dashboard.html\" title=\"Dashboard\"\r\n            ><i class=\"fas fa-user\"></i>\r\n            <span class=\"hide-sm\">Dashboard</span></a\r\n          >\r\n        </li>\r\n        <li>\r\n          <a href=\"login.html\" title=\"Logout\">\r\n            <i class=\"fas fa-sign-out-alt\"></i>\r\n            <span class=\"hide-sm\">Logout</span></a\r\n          >\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <h1 class=\"large text-primary\">\r\n        Posts\r\n      </h1>\r\n      <p class=\"lead\"><i class=\"fas fa-user\"></i> Welcome to the community!</p>\r\n\r\n      <div class=\"post-form\">\r\n        <div class=\"bg-primary p\">\r\n          <h3>Say Something...</h3>\r\n        </div>\r\n        <form class=\"form my-1\">\r\n          <textarea\r\n            name=\"text\"\r\n            cols=\"30\"\r\n            rows=\"5\"\r\n            placeholder=\"Create a post\"\r\n            required\r\n          ></textarea>\r\n          <input type=\"submit\" class=\"btn btn-dark my-1\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n\r\n      <div class=\"posts\">\r\n        <div class=\"post bg-white p-1 my-1\">\r\n          <div>\r\n            <a href=\"profile.html\">\r\n              <img\r\n                class=\"round-img\"\r\n                src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\r\n                alt=\"\"\r\n              />\r\n              <h4>John Doe</h4>\r\n            </a>\r\n          </div>\r\n          <div>\r\n            <p class=\"my-1\">\r\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint\r\n              possimus corporis sunt necessitatibus! Minus nesciunt soluta\r\n              suscipit nobis. Amet accusamus distinctio cupiditate blanditiis\r\n              dolor? Illo perferendis eveniet cum cupiditate aliquam?\r\n            </p>\r\n             <p class=\"post-date\">\r\n                Posted on 04/16/2019\r\n            </p>\r\n            <button type=\"button\" class=\"btn btn-light\">\r\n              <i class=\"fas fa-thumbs-up\"></i>\r\n              <span>4</span>\r\n            </button>\r\n            <button type=\"button\" class=\"btn btn-light\">\r\n              <i class=\"fas fa-thumbs-down\"></i>\r\n            </button>\r\n            <a href=\"post.html\" class=\"btn btn-primary\">\r\n              Discussion <span class='comment-count'>2</span>\r\n            </a>\r\n            <button      \r\n            type=\"button\"\r\n            class=\"btn btn-danger\"\r\n          >\r\n            <i class=\"fas fa-times\"></i>\r\n          </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"post bg-white p-1 my-1\">\r\n          <div>\r\n            <a href=\"profile.html\">\r\n              <img\r\n                class=\"round-img\"\r\n                src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\r\n                alt=\"\"\r\n              />\r\n              <h4>John Doe</h4>\r\n            </a>\r\n          </div>\r\n          <div>\r\n            <p class=\"my-1\">\r\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint\r\n              possimus corporis sunt necessitatibus! Minus nesciunt soluta\r\n              suscipit nobis. Amet accusamus distinctio cupiditate blanditiis\r\n              dolor? Illo perferendis eveniet cum cupiditate aliquam?\r\n            </p>\r\n            <p class=\"post-date\">\r\n                Posted on 04/16/2019\r\n            </p>\r\n            <button type=\"button\" class=\"btn btn-light\">\r\n              <i class=\"fas fa-thumbs-up\"></i>\r\n              <span>4</span>\r\n            </button>\r\n            <button type=\"button\" class=\"btn btn-light\">\r\n              <i class=\"fas fa-thumbs-down\"></i>\r\n            </button>\r\n            <a href=\"post.html\" class=\"btn btn-primary\">\r\n              Discussion <span class='comment-count'>3</span>\r\n            </a>\r\n            <button      \r\n            type=\"button\"\r\n            class=\"btn btn-danger\"\r\n          >\r\n            <i class=\"fas fa-times\"></i>\r\n          </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\profile.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"register.html\">Register</a></li>\r\n        <li><a href=\"login.html\">Login</a></li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <a href=\"profiles.html\" class=\"btn btn-light\">Back To Profiles</a>\r\n\r\n      <div class=\"profile-grid my-1\">\r\n         <!-- Top -->\r\n        <div class=\"profile-top bg-primary p-2\">\r\n          <img\r\n            class=\"round-img my-1\"\r\n            src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\r\n            alt=\"\"\r\n          />\r\n          <h1 class=\"large\">John Doe</h1>\r\n          <p class=\"lead\">Developer at Microsoft</p>\r\n          <p>Seattle, WA</p>\r\n          <div class=\"icons my-1\">\r\n            <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <i class=\"fas fa-globe fa-2x\"></i>\r\n            </a>\r\n            <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <i class=\"fab fa-twitter fa-2x\"></i>\r\n            </a>\r\n            <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <i class=\"fab fa-facebook fa-2x\"></i>\r\n            </a>\r\n            <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <i class=\"fab fa-linkedin fa-2x\"></i>\r\n            </a>\r\n             <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <i class=\"fab fa-youtube fa-2x\"></i>\r\n            </a>\r\n            <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <i class=\"fab fa-instagram fa-2x\"></i>\r\n            </a>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- About -->\r\n        <div class=\"profile-about bg-light p-2\">\r\n          <h2 class=\"text-primary\">John's Bio</h2>\r\n          <p>\r\n            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sed\r\n            doloremque nesciunt, repellendus nostrum deleniti recusandae nobis\r\n            neque modi perspiciatis similique?\r\n          </p>\r\n          <div class=\"line\"></div>\r\n          <h2 class=\"text-primary\">Skill Set</h2>\r\n          <div class=\"skills\">\r\n            <div class=\"p-1\"><i class=\"fa fa-check\"></i> HTML</div>\r\n            <div class=\"p-1\"><i class=\"fa fa-check\"></i> CSS</div>\r\n            <div class=\"p-1\"><i class=\"fa fa-check\"></i> JavaScript</div>\r\n            <div class=\"p-1\"><i class=\"fa fa-check\"></i> Python</div>\r\n            <div class=\"p-1\"><i class=\"fa fa-check\"></i> C#</div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Experience -->\r\n        <div class=\"profile-exp bg-white p-2\">\r\n          <h2 class=\"text-primary\">Experience</h2>\r\n          <div>\r\n            <h3 class=\"text-dark\">Microsoft</h3>\r\n            <p>Oct 2011 - Current</p>\r\n            <p><strong>Position: </strong>Senior Developer</p>\r\n            <p>\r\n              <strong>Description: </strong>Lorem ipsum dolor sit amet\r\n              consectetur adipisicing elit. Dignissimos placeat, dolorum ullam\r\n              ipsam, sapiente suscipit dicta eius velit amet aspernatur\r\n              asperiores modi quidem expedita fugit.\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <h3 class=\"text-dark\">Sun Microsystems</h3>\r\n            <p>Nov 2004 - Nov 2011</p>\r\n            <p><strong>Position: </strong>Systems Admin</p>\r\n            <p>\r\n              <strong>Description: </strong>Lorem ipsum dolor sit amet\r\n              consectetur adipisicing elit. Dignissimos placeat, dolorum ullam\r\n              ipsam, sapiente suscipit dicta eius velit amet aspernatur\r\n              asperiores modi quidem expedita fugit.\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Education -->\r\n        <div class=\"profile-edu bg-white p-2\">\r\n          <h2 class=\"text-primary\">Education</h2>\r\n          <div>\r\n            <h3>University Of Washington</h3>\r\n            <p>Sep 1993 - June 1999</p>\r\n            <p><strong>Degree: </strong>Masters</p>\r\n            <p><strong>Field Of Study: </strong>Computer Science</p>\r\n            <p>\r\n              <strong>Description: </strong>Lorem ipsum dolor sit amet\r\n              consectetur adipisicing elit. Dignissimos placeat, dolorum ullam\r\n              ipsam, sapiente suscipit dicta eius velit amet aspernatur\r\n              asperiores modi quidem expedita fugit.\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Github -->\r\n        <div class=\"profile-github\">\r\n          <h2 class=\"text-primary my-1\">\r\n            <i class=\"fab fa-github\"></i> Github Repos\r\n          </h2>\r\n          <div class=\"repo bg-white p-1 my-1\">\r\n            <div>\r\n              <h4><a href=\"#\" target=\"_blank\"\r\n                  rel=\"noopener noreferrer\">Repo One</a></h4>\r\n              <p>\r\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\r\n                Repellat, laborum!\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <ul>\r\n                <li class=\"badge badge-primary\">Stars: 44</li>\r\n                <li class=\"badge badge-dark\">Watchers: 21</li>\r\n                <li class=\"badge badge-light\">Forks: 25</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"repo bg-white p-1 my-1\">\r\n            <div>\r\n              <h4><a href=\"#\" target=\"_blank\"\r\n                  rel=\"noopener noreferrer\">Repo Two</a></h4>\r\n              <p>\r\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\r\n                Repellat, laborum!\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <ul>\r\n                <li class=\"badge badge-primary\">Stars: 44</li>\r\n                <li class=\"badge badge-dark\">Watchers: 21</li>\r\n                <li class=\"badge badge-light\">Forks: 25</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\profiles.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"register.html\">Register</a></li>\r\n        <li><a href=\"login.html\">Login</a></li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <h1 class=\"large text-primary\">Developers</h1>\r\n      <p class=\"lead\">\r\n        <i class=\"fab fa-connectdevelop\"></i> Browse and connect with developers\r\n      </p>\r\n      <div class=\"profiles\">\r\n        <div class=\"profile bg-light\">\r\n          <img\r\n            class=\"round-img\"\r\n            src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\r\n            alt=\"\"\r\n          />\r\n          <div>\r\n            <h2>John Doe</h2>\r\n            <p>Developer at Microsoft</p>\r\n            <p>Seattle, WA</p>\r\n            <a href=\"profile.html\" class=\"btn btn-primary\">View Profile</a>\r\n          </div>\r\n\r\n          <ul>\r\n            <li class=\"text-primary\">\r\n              <i class=\"fas fa-check\"></i> HTML\r\n            </li>\r\n            <li class=\"text-primary\">\r\n              <i class=\"fas fa-check\"></i> CSS\r\n            </li>\r\n            <li class=\"text-primary\">\r\n              <i class=\"fas fa-check\"></i> JavaScript\r\n            </li>\r\n            <li class=\"text-primary\">\r\n              <i class=\"fas fa-check\"></i> Python\r\n            </li>\r\n            <li class=\"text-primary\">\r\n              <i class=\"fas fa-check\"></i> C#\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"profile bg-light\">\r\n          <img\r\n            class=\"round-img\"\r\n            src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\r\n            alt=\"\"\r\n          />\r\n          <div>\r\n            <h2>John Doe</h2>\r\n            <p>Developer at Microsoft</p>\r\n            <p>Seattle, WA</p>\r\n            <a href=\"profile.html\" class=\"btn btn-primary\">View Profile</a>\r\n          </div>\r\n\r\n          <ul>\r\n            <li class=\"text-primary\">\r\n              <i class=\"fas fa-check\"></i> HTML\r\n            </li>\r\n            <li class=\"text-primary\">\r\n              <i class=\"fas fa-check\"></i> CSS\r\n            </li>\r\n            <li class=\"text-primary\">\r\n              <i class=\"fas fa-check\"></i> JavaScript\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  },
  {
    "name": "_resources\\html_css_theme\\register.html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css?family=Raleway\"\r\n      rel=\"stylesheet\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\"\r\n      integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n\r\n    <link rel=\"stylesheet\" href=\"css/style.css\" />\r\n    <title>Welcome To The Developer Connector</title>\r\n  </head>\r\n  <body>\r\n    <nav class=\"navbar bg-dark\">\r\n      <h1>\r\n        <a href=\"index.html\"><i class=\"fas fa-code\"></i> DevConnector</a>\r\n      </h1>\r\n      <ul>\r\n        <li><a href=\"profiles.html\">Developers</a></li>\r\n        <li><a href=\"register.html\">Register</a></li>\r\n        <li><a href=\"login.html\">Login</a></li>\r\n      </ul>\r\n    </nav>\r\n    <section class=\"container\">\r\n      <h1 class=\"large text-primary\">Sign Up</h1>\r\n      <p class=\"lead\"><i class=\"fas fa-user\"></i> Create Your Account</p>\r\n      <form class=\"form\" action=\"create-profile.html\">\r\n        <div class=\"form-group\">\r\n          <input type=\"text\" placeholder=\"Name\" name=\"name\" required />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"email\" placeholder=\"Email Address\" name=\"email\" />\r\n          <small class=\"form-text\"\r\n            >This site uses Gravatar so if you want a profile image, use a\r\n            Gravatar email</small\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            name=\"password\"\r\n            minLength=\"6\"\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            name=\"password2\"\r\n            minLength=\"6\"\r\n          />\r\n        </div>\r\n        <input type=\"submit\" class=\"btn btn-primary\" value=\"Register\" />\r\n      </form>\r\n      <p class=\"my-1\">\r\n        Already have an account? <a href=\"login.html\">Sign In</a>\r\n      </p>\r\n    </section>\r\n  </body>\r\n</html>\r\n"
  }
]